<style>
    /* Estilos para el modal */
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4);
    }

    .modal-content {
        background-color: #fefefe;
        margin: 15% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
    }

    .close-button {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

    .close-button:hover,
    .close-button:focus {
        color: black;
        text-decoration: none;
        cursor: pointer;
    }

    #snackbar {
        visibility: hidden;
        min-width: 250px;
        background-color: #333;
        color: #fff;
        text-align: center;
        border-radius: 2px;
        padding: 16px;
        position: fixed;
        z-index: 1;
        left: 50%;
        bottom: 30px;
        font-size: 17px;
        transition: visibility 0s, opacity 0.5s linear;
        opacity: 0;
    }

    #snackbar.show {
        visibility: visible;
        opacity: 1;
    }

    table {
        width: 100%;
        border-collapse: collapse;
    }

    th, td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
    }

    th {
        background-color: #f2f2f2;
    }

    tr:hover {
        background-color: #f1f1f1;
    }
</style>

<h1>Lista de Usuarios</h1>
<hr />

<section>
    <div id="userTableContainer"></div>
</section>

<div id="snackbar" class="snackbar"></div>

<!-- Modal para editar usuarios -->
<div id="editUserModal" class="modal">
    <div class="modal-content">
        <span class="close-button">&times;</span>
        <h2>Editar Usuario</h2>
        <div id="modalFormContainer"></div>
    </div>
</div>

<script>
    $(document).ready(function() {
        // Obtener usuarios cuando se carga la página
        fetchUsers();

        // Evento cuando se hace clic en "Editar"
        $(document).on('click', '.edit-button', function(e) {
            e.preventDefault();
            const userId = $(this).data('user-id');
            getUserInfo(userId); // Nueva función para obtener datos del usuario
        });

        // Cerrar el modal al hacer clic en el botón de cerrar o fuera del modal
        $('.close-button, #editUserModal').on('click', function(e) {
            if (e.target === this) $('#editUserModal').fadeOut();
        });

        // Obtener y renderizar la tabla de usuarios
        function fetchUsers() {
            $.ajax({
                url: '/users/getUsers',
                type: 'GET',
                success: renderUserTable,
                error: function(xhr) {
                    console.error('Error al obtener los usuarios:', xhr);
                }
            });
        }

        // Función para renderizar la tabla de usuarios
        function renderUserTable(users) {
            let tableHtml = `
                <table>
                    <thead>
                        <tr>
                            <th>Nombre</th>
                            <th>Apellidos</th>
                            <th>Email</th>
                            <th>Género</th>
                            <th>Roles</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
            `;

            users.forEach(user => {
                let rolesHtml = '<ul>';
                user.roles.forEach(role => {
                    rolesHtml += `<li>${role.name}</li>`;
                });
                rolesHtml += '</ul>';

                tableHtml += `
                    <tr>
                        <td>${user.name}</td>
                        <td>${user.surnames}</td>
                        <td>${user.email}</td>
                        <td>${user.gender}</td>
                        <td>${rolesHtml}</td>
                        <td>
                            <button class="edit-button" data-user-id="${user._id}">Editar</button>
                            <button class="delete-button" data-user-id="${user._id}">Eliminar</button>
                        </td>
                    </tr>
                `;
            });

            tableHtml += '</tbody></table>';
            $('#userTableContainer').html(tableHtml);

            // Manejar los eventos de eliminación de usuario
            $('.delete-button').click(function() {
                const userId = $(this).data('user-id');
                deleteUser(userId);
            });
        }

        // Función para obtener información del usuario
     function getUserInfo(userId) {
    $.ajax({
        url: `/users/showInfo/${userId}`,
        type: 'GET',
        success: function({ user, allRoles, isPasswordHashed }) {
            renderEditForm(user, allRoles, userId, isPasswordHashed); // Pasa isPasswordHashed aquí
            $('#editUserModal').fadeIn();
        },
        error: function() {
            showSnackbar('Error al obtener el formulario de edición', false);
        }
    });
}

function renderEditForm(user, allRoles, userId, isPasswordHashed) {
    const rolesHtml = allRoles.map(role => `
        <label>
            <input type="checkbox" name="roles" value="${role._id}" 
                ${user.roles.some(userRole => userRole.name === role.name) ? 'checked' : ''}>
                ${role.name}
        </label>
    `).join('');

    $('#modalFormContainer').html(`
        <form id="userUpdateForm" data-user-id="${userId}">
            <label for="name">Nombre:</label>
            <input type="text" id="name" name="name" value="${user.name}" required ${isPasswordHashed ? 'disabled' : ''}>
            <label for="surnames">Apellidos:</label>
            <input type="text" id="surnames" name="surnames" value="${user.surnames}" required ${isPasswordHashed ? 'disabled' : ''}>
            <label for="email">Email:</label>
            <input type="email" id="email" name="email" value="${user.email}" required ${isPasswordHashed ? 'disabled' : ''}>
            <label for="gender">Género:</label>
            <select id="gender" name="gender" required ${isPasswordHashed ? 'disabled' : ''}>
                <option value="masculino" ${user.gender === 'masculino' ? 'selected' : ''}>Masculino</option>
                <option value="femenino" ${user.gender === 'femenino' ? 'selected' : ''}>Femenino</option>
                <option value="otro" ${user.gender === 'otro' ? 'selected' : ''}>Otro</option>
            </select>
            <fieldset>
                <legend>Roles:</legend>
                ${rolesHtml}
            </fieldset>
            <button type="submit">Actualizar Usuario</button> <!-- Asegúrate de que este botón no tenga el atributo 'disabled' -->
        </form>
    `);
}

// Manejo del envío del formulario de edición
$(document).on('submit', '#userUpdateForm', function(e) {
    e.preventDefault();
    const userId = $(this).data('user-id');

    const userData = {
        name: $('#name').val(),
        surnames: $('#surnames').val(),
        email: $('#email').val(),
        gender: $('#gender').val(),
        roles: $('input[name="roles"]:checked').map(function() {
            return this.value;
        }).get()
    };

    $.ajax({
        url: `/users/update/${userId}`,
        type: 'PUT',
        contentType: 'application/json',
        data: JSON.stringify(userData),
        success: function(response) {
            showSnackbar(response.message, true);
            fetchUsers(); // Refrescar la lista de usuarios
            // Cerrar el modal después de un retraso de 2 segundos
            setTimeout(() => {
                $('#editUserModal').fadeOut();
            }, 2000); // 2000 milisegundos = 2 segundos
        },
        error: function(xhr) {
            const errorMessage = xhr.responseJSON && xhr.responseJSON.message ? xhr.responseJSON.message : 'Error al actualizar el usuario';
            showSnackbar(errorMessage, false);
        }
    });
});



        // Función para eliminar usuario
        function deleteUser(userId) {
            $.ajax({
                url: `/users/${userId}`,
                type: 'DELETE',
                success: function(response) {
                    showSnackbar(response.message, true);
                    fetchUsers();
                },
                error: function(xhr) {
                    const errorMessage = xhr.responseJSON && xhr.responseJSON.message ? xhr.responseJSON.message : 'Error al eliminar el usuario';
                    showSnackbar(errorMessage, false);
                }
            });
        }

        // Función para mostrar notificaciones (snackbar)
        function showSnackbar(message, success) {
            const snackbar = $('#snackbar');
            snackbar.html(message);
            snackbar.css('background-color', success ? '#4CAF50' : '#f44336');
            snackbar.addClass('show');
            setTimeout(() => snackbar.removeClass('show'), 3000);
        }
    });
</script>
