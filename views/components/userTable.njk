
    <style>
        /* Estilos para el modal */
        .modal {
            display: none; /* Oculto por defecto */
            position: fixed; /* Fijo (permanece visible cuando haces scroll) */
            z-index: 1000; /* Asegúrate de que esté por encima de otros elementos */
            left: 0;
            top: 0;
            width: 100%; /* Ocupa todo el ancho */
            height: 100%; /* Ocupa todo el alto */
            overflow: auto; /* Permite scroll si el contenido es más alto que la ventana */
            background-color: rgba(0, 0, 0, 0.4); /* Fondo negro con opacidad */
        }

        .modal-content {
            background-color: #fefefe;
            margin: 15% auto; /* Centrarlo vertical y horizontalmente */
            padding: 20px;
            border: 1px solid #888;
            width: 80%; /* Ajusta el ancho como necesites */
        }

        .close-button {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        .close-button:hover,
        .close-button:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

        #snackbar {
            visibility: hidden; /* Ocultar el snackbar por defecto */
            min-width: 250px; /* Ancho mínimo */
            margin-left: -125px; /* Centrar el snackbar */
            background-color: #333; /* Color de fondo */
            color: #fff; /* Color del texto */
            text-align: center; /* Centrar texto */
            border-radius: 2px; /* Bordes redondeados */
            padding: 16px; /* Espaciado interno */
            position: fixed; /* Posicionarlo fijo */
            z-index: 1; /* Asegurar que esté por encima */
            left: 50%; /* Centramos horizontalmente */
            bottom: 30px; /* Distancia desde la parte inferior */
            font-size: 17px; /* Tamaño del texto */
            transition: visibility 0s, opacity 0.5s linear; /* Transiciones suaves */
            opacity: 0; /* Comienza como invisible */
        }

        #snackbar.show {
            visibility: visible; /* Hacer visible el snackbar */
            opacity: 1; /* Hacerlo visible */
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }

        th {
            background-color: #f2f2f2;
        }

        tr:hover {
            background-color: #f1f1f1;
        }
    </style>


    <h1>Lista de Usuarios</h1>
    <hr />

    <!-- Contenedor para la tabla de usuarios -->
    <section>
        <div id="userTableContainer"></div> <!-- Este div contendrá la tabla generada con AJAX -->
    </section>

    <div id="snackbar" class="snackbar"></div>

    <!-- Modal para editar usuarios -->
    <div id="editUserModal" class="modal">
        <div class="modal-content">
            <span class="close-button">&times;</span>
            <h2>Editar Usuario</h2>
            <div id="modalFormContainer">
                <!-- Aquí se cargará el formulario dinámicamente con AJAX -->
            </div>
        </div>
    </div>

    <script>
        $(document).ready(function() {
            // Obtener usuarios cuando se carga la página
            fetchUsers();

            // Evento cuando se hace clic en "Editar"
            $(document).on('click', '.edit-button', function(e) {
                e.preventDefault();
                const userId = $(this).attr('href').split('/').pop(); // Obtener el ID del usuario desde la URL

                // Hacer una petición AJAX para obtener los datos del formulario
                 $.ajax({
        url: `/users/showInfo/${userId}`, // URL de la API para obtener el usuario
        type: 'GET',
        success: function (user) {
            // Cargar el formulario en el modal
            $('#modalFormContainer').html(`
                <form id="userUpdateForm" data-user-id="${userId}">
                    <label for="name">Nombre:</label>
                    <input type="text" id="name" name="name" value="${user.name}" required>

                    <label for="surnames">Apellidos:</label>
                    <input type="text" id="surnames" name="surnames" value="${user.surnames}" required>

                    <label for="email">Email:</label>
                    <input type="email" id="email" name="email" value="${user.email}" required>

                    <label for="gender">Género:</label>
                    <select id="gender" name="gender" required>
                        <option value="masculino" ${user.gender === 'masculino' ? 'selected' : ''}>Masculino</option>
                        <option value="femenino" ${user.gender === 'femenino' ? 'selected' : ''}>Femenino</option>
                        <option value="otro" ${user.gender === 'otro' ? 'selected' : ''}>Otro</option>
                    </select>

                    <label>Roles:</label>
                    <div>
                        <input type="checkbox" name="roles" value="admin" ${user.roles.includes('admin') ? 'checked' : ''}> Administrador
                        <input type="checkbox" name="roles" value="editor" ${user.roles.includes('editor') ? 'checked' : ''}> Editor
                        <input type="checkbox" name="roles" value="viewer" ${user.roles.includes('viewer') ? 'checked' : ''}> Viewer
                    </div>

                    <button type="submit">Actualizar Usuario</button>
                </form>
            `);
            $('#editUserModal').fadeIn(); // Mostrar el modal
        },
        error: function () {
            showSnackbar('Error al obtener el formulario de edición', false);
        }
    });
            });



            // Función para cerrar el modal
            $('.close-button').click(function() {
                $('#editUserModal').fadeOut(); // Ocultar el modal
            });

            // También cerrar el modal si se hace clic fuera del contenido del modal
            $(window).click(function(event) {
                const modal = $('#editUserModal');
                if (event.target == modal[0]) {
                    modal.fadeOut(); // Ocultar el modal
                }
            });

            // Función para obtener usuarios
            function fetchUsers() {
                $.ajax({
                    url: '/users/getUsers',
                    type: 'GET',
                    success: function(users) {
                        renderUserTable(users);
                    },
                    error: function(xhr) {
                        console.error('Error al obtener los usuarios:', xhr);
                    }
                });
            }

            // Función para renderizar la tabla de usuarios
            function renderUserTable(users) {
                let tableHtml = `
                    <table>
                        <thead>
                            <tr>
                                <th>Nombre</th>
                                <th>Apellidos</th>
                                <th>Email</th>
                                <th>Género</th>
                                <th>Roles</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                `;

                users.forEach(user => {
                    let rolesHtml = '<ul>';
                    user.roles.forEach(role => {
                        rolesHtml += `<li>${role.name}</li>`;
                    });
                    rolesHtml += '</ul>';

                    tableHtml += `
                        <tr>
                            <td>${user.name}</td>
                            <td>${user.surnames}</td>
                            <td>${user.email}</td>
                            <td>${user.gender}</td>
                            <td>${rolesHtml}</td>
                            <td>
                                <a href="/users/${user._id}" class="edit-button">Editar</a>
                                <button class="delete-button" data-user-id="${user._id}">Eliminar</button>
                            </td>
                        </tr>
                    `;
                });

                tableHtml += '</tbody></table>';
                $('#userTableContainer').html(tableHtml);

                // Manejar los eventos de eliminación de usuario
                $('.delete-button').click(function() {
                    const userId = $(this).data('user-id');
                    deleteUser(userId);
                });
            }

            // Función para eliminar usuario
            function deleteUser(userId) {
                $.ajax({
                    url: `/users/${userId}`,
                    type: 'DELETE',
                    success: function(response) {
                        showSnackbar(response.message, true); // Mostrar mensaje de éxito con el snackbar
                        fetchUsers(); // Volver a cargar la tabla de usuarios
                    },
                    error: function(xhr) {
                        const errorMessage = xhr.responseJSON && xhr.responseJSON.message ? xhr.responseJSON.message : 'Error al eliminar el usuario';
                        showSnackbar(errorMessage, false); // Mostrar mensaje de error con el snackbar
                    }
                });
            }

      // Evento para manejar la actualización del formulario en el modal
$(document).on('submit', '#userUpdateForm', function(e) {
    e.preventDefault(); // Evitar el envío normal del formulario
    const userId = $(this).data('user-id'); // Obtener el ID del usuario

    const userData = {
        name: $('#name').val(),
        surnames: $('#surnames').val(),
        email: $('#email').val(), // Incluir el correo electrónico en el envío
        gender: $('#gender').val(),
        roles: $('input[name="roles"]:checked').map(function() {
            return this.value;
        }).get()
    };

    $.ajax({
        url: `/users/update/${userId}`,
        type: 'PUT', // Asegúrate de que esto sea el método correcto
        contentType: 'application/json',
        data: JSON.stringify(userData),
        success: function(response) {
            showSnackbar(response.message, true); // Mostrar mensaje de éxito
            
            // Llamar a fetchUsers para actualizar la tabla
            fetchUsers().then(() => {
                $('#editUserModal').fadeOut(); // Ocultar el modal después de actualizar la tabla
            });
        },
        error: function(xhr) {
            const errorMessage = xhr.responseJSON && xhr.responseJSON.message ? xhr.responseJSON.message : 'Error al actualizar el usuario';
            showSnackbar(errorMessage, false); // Mostrar mensaje de error
        }
    });
});

        });
    </script>

