<h1>Lista de Usuarios</h1>
<hr />

<!-- Botón para agregar un nuevo usuario -->
<button id="addUserButton">Agregar Usuario</button>
<section>
    {% include "pages/privatePages/users/adminUsers.njk" %}
</section>
<section>


<section>
    <div id="userTableContainer"></div>
</section>

<div id="snackbar" class="snackbar"></div>

<!-- Modal para editar usuarios -->
<div id="editUserModal" class="modal">
    <div class="modal-content">
        <span class="close-button">&times;</span>
        <h2>Editar Usuario</h2>
        <div id="modalFormContainer"></div> <!-- Contenedor para el formulario -->
    </div>
</div>

<script>
$(document).ready(function() {
    // Obtener usuarios cuando se carga la página
    fetchUsers();

    // Evento para editar un usuario
    $(document).on('click', '.edit-button', function(e) {
        e.preventDefault();
        const userId = $(this).data('user-id');
        getUserInfo(userId); // Obtener datos del usuario
    });

    // Obtener y renderizar la tabla de usuarios
    function fetchUsers() {
        apiFetch('/users/getUsers', 'GET')
            .then(renderUserTable)
            .catch(function(xhr) {
                console.error('Error al obtener los usuarios:', xhr);
            });
    }

    // Función para renderizar la tabla de usuarios
    function renderUserTable(users) {
        let tableHtml = `
            <table>
                <thead>
                    <tr>
                        <th>Nombre</th>
                        <th>Apellidos</th>
                        <th>Email</th>
                        <th>Género</th>
                        <th>Roles</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
        `;

        users.forEach(user => {
            let rolesHtml = '<ul>';
            user.roles.forEach(role => {
                rolesHtml += `<li>${role.name}</li>`;
            });
            rolesHtml += '</ul>';

            tableHtml += `
                <tr>
                    <td>${user.name}</td>
                    <td>${user.surnames}</td>
                    <td>${user.email}</td>
                    <td>${user.gender}</td>
                    <td>${rolesHtml}</td>
                    <td>
                        <button class="edit-button" data-user-id="${user._id}">Editar</button>
                        <button class="delete-button" data-user-id="${user._id}">Eliminar</button>
                    </td>
                </tr>
            `;
        });

        tableHtml += '</tbody></table>';
        $('#userTableContainer').html(tableHtml);

        // Manejar los eventos de eliminación de usuario
        $('.delete-button').click(function() {
            const userId = $(this).data('user-id');
            deleteUser(userId);
        });
    }

    // Función para obtener información del usuario
    function getUserInfo(userId) {
        apiFetch(`/users/showInfo/${userId}`, 'GET')
            .then(({ user, allRoles, isPasswordHashed }) => {
                renderEditForm(user, allRoles, userId, isPasswordHashed);
                $('#editUserModal').fadeIn(); // Abrir el modal de edición
            })
            .catch(() => {
                showSnackbar('Error al obtener el formulario de edición', false);
            });
    }

    // Renderizar el formulario de edición
    function renderEditForm(user, allRoles, userId, isPasswordHashed) {
        const rolesHtml = allRoles.map(role => `
            <label>
                <input type="checkbox" name="roles" value="${role._id}" 
                    ${user.roles.some(userRole => userRole.name === role.name) ? 'checked' : ''}>
                ${role.name}
            </label>
        `).join('');

        $('#modalFormContainer').html(`
            <form id="userUpdateForm" data-user-id="${userId}">
                <label for="name">Nombre:</label>
                <input type="text" id="name" name="name" value="${user.name}" required ${isPasswordHashed ? 'disabled' : ''}>
                <label for="surnames">Apellidos:</label>
                <input type="text" id="surnames" name="surnames" value="${user.surnames}" required ${isPasswordHashed ? 'disabled' : ''}>
                <label for="email">Email:</label>
                <input type="email" id="email" name="email" value="${user.email}" required ${isPasswordHashed ? 'disabled' : ''}>
                <label for="gender">Género:</label>
                <select id="gender" name="gender" required ${isPasswordHashed ? 'disabled' : ''}>
                    <option value="masculino" ${user.gender === 'masculino' ? 'selected' : ''}>Masculino</option>
                    <option value="femenino" ${user.gender === 'femenino' ? 'selected' : ''}>Femenino</option>
                    <option value="otro" ${user.gender === 'otro' ? 'selected' : ''}>Otro</option>
                </select>
                <fieldset>
                    <legend>Roles:</legend>
                    ${rolesHtml}
                </fieldset>
                <button type="submit">Actualizar Usuario</button>
            </form>
        `);
    }

    // Envío del formulario de edición
    $(document).on('submit', '#userUpdateForm', function(e) {
        e.preventDefault();
        const userId = $(this).data('user-id');

        const userData = {
            name: $('#name').val(),
            surnames: $('#surnames').val(),
            email: $('#email').val(),
            gender: $('#gender').val(),
            roles: $('input[name="roles"]:checked').map(function() {
                return this.value;
            }).get()
        };

        apiFetch(`/users/update/${userId}`, 'PUT', userData)
            .then(response => {
                showSnackbar(response.message, true);
                fetchUsers(); // Refrescar la lista de usuarios
                setTimeout(() => {
                    $('#editUserModal').fadeOut(); // Cerrar después de 2 segundos
                }, 2000);
            })
            .catch(xhr => {
                const errorMessage = xhr.responseJSON && xhr.responseJSON.message ? xhr.responseJSON.message : 'Error al actualizar el usuario';
                showSnackbar(errorMessage, false);
            });
    });

});

// Eliminar un usuario
function deleteUser(userId) {
    if (confirm('¿Estás seguro de que quieres eliminar este usuario?')) {
        apiFetch(`/users/delete/${userId}`, 'DELETE')
            .then(response => {
                showSnackbar(response.message, true);
                fetchUsers(); // Refrescar la lista de usuarios
            })
            .catch(xhr => {
                const errorMessage = xhr.responseJSON && xhr.responseJSON.message ? xhr.responseJSON.message : 'Error al eliminar el usuario';
                showSnackbar(errorMessage, false);
            });
    }
}
</script>
