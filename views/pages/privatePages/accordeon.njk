{% extends "layouts/privateLayout.njk" %} {% block content %}
<h2 style="text-align: center; margin-bottom: 20px">
  Acordeón de Especialidades y Horarios
</h2>

<!-- Tabla de doctores -->
<table class="doctor-table">
  <thead>
    <tr>
      <th>N°</th>
      <th>Doctor</th>
      <th>Especialidades</th>
      <th>Horarios</th>
    </tr>
  </thead>
  <tbody id="doctorTableBody">
    <!-- Las filas de doctores se agregarán dinámicamente -->
  </tbody>
</table>

<script type="module">
  // Función para cargar los datos de los doctores desde el endpoint
  async function fetchDoctorData() {
    try {
      const response = await fetch('/schedules/all');
      if (!response.ok) {
        throw new Error('Error al cargar los datos del servidor');
      }
      const data = await response.json();
      return data;
    } catch (error) {
      console.error('Error al obtener los datos:', error);
      return null;
    }
  }

  // Función para procesar y renderizar los datos en la tabla y acordeón
  async function renderDoctorTable() {
    const tableBody = document.getElementById('doctorTableBody');
    const scheduleData = await fetchDoctorData();

    if (!scheduleData) {
      tableBody.innerHTML = `<tr><td colspan="4">Error al cargar los datos</td></tr>`;
      return;
    }

    // Agrupar datos por doctor
    const groupedData = groupSchedules(scheduleData);

    Object.entries(groupedData).forEach(
      ([doctorName, specialties], doctorIndex) => {
        let totalHours = 0;

        specialties.forEach((specialty) => {
          totalHours += Object.keys(specialty.horarios).length;
        });

        // Crear fila principal del doctor
        const row = document.createElement('tr');
        row.classList.add('doctor-row');
        row.innerHTML = `
        <td>${doctorIndex + 1}</td>
        <td>${doctorName}</td>
        <td>${specialties.length}</td>
        <td>${totalHours}</td>
      `;

        // Crear el acordeón para especialidades
        const accordionContent = document.createElement('tr');
        accordionContent.classList.add('accordion-content');
        const accordionTd = document.createElement('td');
        accordionTd.colSpan = 4;

        const specialtiesList = document.createElement('div');
        specialtiesList.classList.add('specialties-list');
        if (specialties.length > 2) {
          specialtiesList.style.maxHeight = '300px';
          specialtiesList.style.overflowY = 'auto';
        }

        specialties.forEach((specialty, specialtyIndex) => {
          const specialtyDiv = document.createElement('div');
          specialtyDiv.classList.add('specialty');

          const specialtyName = document.createElement('h4');
          specialtyName.textContent = `${doctorIndex + 1}.${
            specialtyIndex + 1
          } ${specialty.Especialidad}`;

          const scheduleTable = document.createElement('table');
          scheduleTable.classList.add('schedule-table');

          const thead = document.createElement('thead');
          thead.innerHTML = `
          <tr>
            <th>Lunes</th>
            <th>Martes</th>
            <th>Miércoles</th>
            <th>Jueves</th>
            <th>Viernes</th>
          </tr>
        `;
          scheduleTable.appendChild(thead);

          const tbody = document.createElement('tbody');
          const row = document.createElement('tr');
          ['Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes'].forEach(
            (day) => {
              const cell = document.createElement('td');
              cell.textContent = specialty.horarios[day] || 'No disponible';
              row.appendChild(cell);
            }
          );
          tbody.appendChild(row);
          scheduleTable.appendChild(tbody);

          specialtyDiv.appendChild(specialtyName);
          specialtyDiv.appendChild(scheduleTable);
          specialtiesList.appendChild(specialtyDiv);
        });

        accordionTd.appendChild(specialtiesList);
        accordionContent.appendChild(accordionTd);

        // Agregar filas a la tabla
        tableBody.appendChild(row);
        tableBody.appendChild(accordionContent);

        // Configurar el evento de acordeón
        row.addEventListener('click', () => {
          document.querySelectorAll('.accordion-content').forEach((content) => {
            if (content !== accordionContent) {
              content.style.display = 'none';
            }
          });

          const isVisible = accordionContent.style.display === 'table-row';
          accordionContent.style.display = isVisible ? 'none' : 'table-row';
          row.classList.toggle('active');
        });
      }
    );
  }

  // Función para agrupar horarios por doctor
  function groupSchedules(data) {
    return Object.keys(data).reduce((acc, doctorName) => {
      acc[doctorName] = data[doctorName].map((schedule) => {
        const specialty = {
          Especialidad: schedule.Especialidad,
          horarios: {
            Lunes: 'No disponible',
            Martes: 'No disponible',
            Miércoles: 'No disponible',
            Jueves: 'No disponible',
            Viernes: 'No disponible',
          },
        };
        if (schedule.horarios) {
          schedule.horarios.forEach((horario) => {
            specialty.horarios[
              horario.dayOfWeek
            ] = `${horario.startTime} - ${horario.endTime}`;
          });
        }
        return specialty;
      });
      return acc;
    }, {});
  }

  // Ejecutar la función al cargar la página
  renderDoctorTable();
</script>

{% endblock %}
