{% extends "layouts/privateLayout.njk" %} {% block content %}
<h2 style="text-align: center; margin-bottom: 20px">
  Acordeón de Especialidades y Horarios
</h2>

<!-- Tabla de doctores -->
<table class="doctor-table">
  <thead>
    <tr>
      <th>N°</th>
      <th>Doctor</th>
      <th>Especialidades</th>
      <th>Horarios</th>
    </tr>
  </thead>
  <tbody id="doctorTableBody">
    <!-- Las filas de doctores se agregarán dinámicamente -->
  </tbody>
</table>

<!-- Menú contextual -->
<div
  id="tableContextMenu"
  style="
    display: none;
    position: absolute;
    background: #fff;
    border: 1px solid #ccc;
    box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.1);
  "
>
  <ul>
    <li id="tableAddSchedule">Añadir Horario</li>
    <li id="tableViewDetails">Ver Detalles</li>
    <li id="tableEditSchedule">Editar</li>
    <li id="tableDeleteSchedule">Eliminar</li>
    <li
      id="tableDeactivateSchedule"
      style="display: none"
    >
      Desactivar
    </li>
    <!-- Nueva opción -->
  </ul>
</div>
<script type="module">
  // Función para cargar los datos de los doctores desde el endpoint
  async function fetchDoctorData() {
    try {
      const response = await fetch('/schedules/all');
      if (!response.ok) {
        throw new Error('Error al cargar los datos del servidor');
      }
      const data = await response.json();
      return data;
    } catch (error) {
      console.error('Error al obtener los datos:', error);
      return null;
    }
  }

  // Función para procesar y renderizar los datos en la tabla y acordeón
  async function renderDoctorTable() {
    const tableBody = document.getElementById('doctorTableBody');
    const scheduleData = await fetchDoctorData();

    if (!scheduleData) {
      tableBody.innerHTML = `<tr><td colspan="4">Error al cargar los datos</td></tr>`;
      return;
    }

    // Agrupar datos por doctor
    const groupedData = groupSchedules(scheduleData);

    Object.entries(groupedData).forEach(
      ([doctorName, specialties], doctorIndex) => {
        let totalHours = 0;

        specialties.forEach((specialty) => {
          // Solo contar los días que tienen un horario disponible
          totalHours += Object.values(specialty.horarios).filter(
            (horario) => horario !== 'No disponible'
          ).length;
        });

        // Crear fila principal del doctor
        const row = document.createElement('tr');
        row.classList.add('doctor-row');
        row.innerHTML = `
          <td>${doctorIndex + 1}</td>
          <td>${doctorName}</td>
          <td>${specialties.length}</td>
          <td>${totalHours}</td>
        `;

        // Crear el acordeón para especialidades
        const accordionContent = document.createElement('tr');
        accordionContent.classList.add('accordion-content');
        const accordionTd = document.createElement('td');
        accordionTd.colSpan = 4;

        const specialtiesList = document.createElement('div');
        specialtiesList.classList.add('specialties-list');
        if (specialties.length > 2) {
          specialtiesList.style.maxHeight = '300px';
          specialtiesList.style.overflowY = 'auto';
        }

        specialties.forEach((specialty, specialtyIndex) => {
          const specialtyDiv = document.createElement('div');
          specialtyDiv.classList.add('specialty');

          const specialtyName = document.createElement('h4');
          specialtyName.textContent = `${doctorIndex + 1}.${
            specialtyIndex + 1
          } ${specialty.Especialidad}`;

          const scheduleTable = document.createElement('table');
          scheduleTable.classList.add('schedule-table');

          const thead = document.createElement('thead');
          thead.innerHTML = `
            <tr>
              <th>Lunes</th>
              <th>Martes</th>
              <th>Miércoles</th>
              <th>Jueves</th>
              <th>Viernes</th>
            </tr>
          `;
          scheduleTable.appendChild(thead);

          const tbody = document.createElement('tbody');
          const row = document.createElement('tr');
          ['Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes'].forEach(
            (day) => {
              const cell = document.createElement('td');
              cell.textContent = specialty.horarios[day] || 'No disponible';

              // Añadir ícono de tres puntos en cada celda de horario, alineado a la derecha
              const icon = document.createElement('span');
              icon.className = 'more-icon';
              icon.innerHTML =
                '<span class="dot"></span><span class="dot"></span><span class="dot"></span>';

              icon.addEventListener('click', (event) => {
                event.stopPropagation(); // Evitar que el clic se propague al documento global
                openContextMenu(event, specialty, doctorName, day); // Llamar al menú contextual
              });

              // Establecer el estilo para que el icono se ubique en el extremo derecho
              icon.style.position = 'absolute';
              icon.style.right = '5px';
              icon.style.top = '50%';
              icon.style.transform = 'translateY(-50%)';

              cell.style.position = 'relative'; // Habilitar posición relativa para que el icono se ubique correctamente
              cell.appendChild(icon);
              row.appendChild(cell);
            }
          );
          tbody.appendChild(row);
          scheduleTable.appendChild(tbody);

          specialtyDiv.appendChild(specialtyName);
          specialtyDiv.appendChild(scheduleTable);
          specialtiesList.appendChild(specialtyDiv);
        });

        accordionTd.appendChild(specialtiesList);
        accordionContent.appendChild(accordionTd);

        // Agregar filas a la tabla
        tableBody.appendChild(row);
        tableBody.appendChild(accordionContent);

        // Configurar el evento de acordeón
        row.addEventListener('click', () => {
          document.querySelectorAll('.accordion-content').forEach((content) => {
            if (content !== accordionContent) {
              content.style.display = 'none';
            }
          });

          const isVisible = accordionContent.style.display === 'table-row';
          accordionContent.style.display = isVisible ? 'none' : 'table-row';
          row.classList.toggle('active');
        });
      }
    );
  }

  function groupSchedules(data) {
    return Object.keys(data).reduce((acc, doctorName) => {
      acc[doctorName] = data[doctorName].map((schedule) => {
        // Inicializamos la estructura de horarios con "No disponible" por defecto
        const specialty = {
          Especialidad: schedule.Especialidad,
          horarios: {
            Lunes: 'No disponible',
            Martes: 'No disponible',
            Miércoles: 'No disponible',
            Jueves: 'No disponible',
            Viernes: 'No disponible',
          },
        };

        // Asignamos los horarios si existen
        if (schedule.horarios && Array.isArray(schedule.horarios)) {
          schedule.horarios.forEach((horario) => {
            // Verifica si el día de la semana está en el objeto de horarios
            if (specialty.horarios[horario.dayOfWeek]) {
              specialty.horarios[
                horario.dayOfWeek
              ] = `${horario.startTime} - ${horario.endTime}`;
            }
          });
        }

        return specialty;
      });
      return acc;
    }, {});
  }

  // Función para abrir el menú contextual
  function openContextMenu(event, specialty, doctorName, day) {
    const menu = document.getElementById('tableContextMenu');
    menu.style.left = `${event.pageX}px`;
    menu.style.top = `${event.pageY}px`;
    menu.style.display = 'block';

    // Determinar el estado del horario para personalizar las opciones
    const scheduleStatus = specialty.horarios[day];

    // Mostrar u ocultar las opciones según el estado del horario
    if (scheduleStatus === 'No disponible') {
      document.getElementById('tableAddSchedule').style.display = 'block';
      document.getElementById('tableEditSchedule').style.display = 'none';
      document.getElementById('tableViewDetails').style.display = 'none';
      document.getElementById('tableDeleteSchedule').style.display = 'none';
      document.getElementById('tableDeactivateSchedule').style.display = 'none';
    } else {
      document.getElementById('tableAddSchedule').style.display = 'none';
      document.getElementById('tableEditSchedule').style.display = 'block';
      document.getElementById('tableViewDetails').style.display = 'block';
      document.getElementById('tableDeleteSchedule').style.display = 'block';
      document.getElementById('tableDeactivateSchedule').style.display =
        'block';
    }

    // Asignar acciones a los elementos del menú
    document.getElementById('tableAddSchedule').onclick = () => {
      closeContextMenu();
      alert(
        `Añadir horario para: ${doctorName} en ${specialty.Especialidad} - ${day}`
      );
    };

    document.getElementById('tableViewDetails').onclick = () => {
      closeContextMenu();
      alert(
        `Ver detalles de: ${doctorName} en ${specialty.Especialidad} - ${day}`
      );
    };

    document.getElementById('tableEditSchedule').onclick = () => {
      closeContextMenu();
      alert(
        `Editar horario de: ${doctorName} en ${specialty.Especialidad} - ${day}`
      );
    };

    document.getElementById('tableDeleteSchedule').onclick = () => {
      closeContextMenu();
      alert(
        `Eliminar horario de: ${doctorName} en ${specialty.Especialidad} - ${day}`
      );
    };

    document.getElementById('tableDeactivateSchedule').onclick = () => {
      closeContextMenu();
      alert(
        `Desactivar horario de: ${doctorName} en ${specialty.Especialidad} - ${day}`
      );
    };
  }

  // Función para cerrar el menú contextual
  function closeContextMenu() {
    const menu = document.getElementById('tableContextMenu');
    menu.style.display = 'none';
  }

  // Cerrar el menú si se hace clic fuera de la tabla
  document.addEventListener('click', (event) => {
    const menu = document.getElementById('tableContextMenu');
    if (
      !menu.contains(event.target) &&
      !event.target.closest('.doctorTableBody')
    ) {
      closeContextMenu();
    }
  });

  // Ejecutar la función al cargar la página
  renderDoctorTable();
</script>

{% endblock %}
