{% extends "layouts/privateLayout.njk" %} {% block content %}
<h1>Perfil del Usuario</h1>
<div
  id="profileContainer"
  class="profile-container"
>
  <div class="profile-details">
    <h2>Información Personal</h2>
    <form id="profileForm">
      <label for="name">Nombre:</label>
      <input
        type="text"
        name="name"
        required
        id="nameInput"
        class="transparent-input"
        disabled
      />

      <label for="surnames">Apellidos:</label>
      <input
        type="text"
        name="surnames"
        required
        id="surnamesInput"
        class="transparent-input"
        disabled
      />

      <label for="email">Email:</label>
      <input
        type="email"
        name="email"
        required
        id="emailInput"
        class="transparent-input"
        disabled
      />

      <label for="gender">Género:</label>
      <select
        name="gender"
        id="genderSelect"
        class="transparent-input"
        disabled
      >
        <option value="masculino">Masculino</option>
        <option value="femenino">Femenino</option>
        <option value="otro">Otro</option>
      </select>

      <label for="createdAt">Fecha de Registro:</label>
      <input
        type="text"
        name="createdAt"
        disabled
        id="createdAtInput"
        class="transparent-input"
      />
      {% include "components/common/actions/buttonActions.njk" %}
    </form>
  </div>
  <div class="upload">
    {% include "components/common/actions/uploadActions.njk" %} {% include
    "components/custom/common/deleteItem.njk" %} {% include
    "components/custom/customPopover.njk" %} {% include
    "components/common/deleteItem.njk" %}
  </div>
</div>
<div
  id="genericModal"
  class="modal"
  style="display: none"
>
  <div class="modal-content">
    <span
      class="close"
      onclick="closeModal('genericModal')"
      >&times;</span
    >
    <h2 class="modal-title">Editar Archivo</h2>
    <label for="genericDescriptionInput">Descripción:</label>
    <input
      type="text"
      id="genericDescriptionInput"
    />

    <!-- Aquí se añade la imagen actual -->
    <div>
      <img
        id="genericCurrentImage"
        style="max-width: 100%; display: none"
      />
    </div>

    <label for="genericFileInput">Seleccionar nuevo archivo:</label>
    <input
      type="file"
      id="genericFileInput"
    />
    <p id="selectedFileName"></p>
    <!-- Muestra el nombre del archivo seleccionado -->

    <button id="genericSaveButton">Guardar Cambios</button>
  </div>
</div>

<div
  id="genericModal"
  class="modal"
>
  <div class="modal-content medium">
    <h2 class="modal-title">Editar Archivo</h2>
    <div>
      <img
        id="genericCurrentImage"
        src=""
        alt="Imagen actual"
        class="uploaded-image"
      />
    </div>
    <input
      type="text"
      id="genericDescriptionInput"
      placeholder="Descripción"
    />
    <input
      type="file"
      id="genericFileInput"
    />
    <span id="selectedFileName"></span>
    <!-- Muestra el nombre del archivo seleccionado -->
    <button id="genericSaveButton">Guardar Cambios</button>
    <button onclick="closeModal('genericModal')">Cancelar</button>
  </div>
</div>

<div
  id="snackbar"
  class="snackbar"
></div>
<script type="module">
  import { loadUserProfile } from '../js/services/profileService.js';
  import { handleProfileUpdate } from '../js/logic/auth/profileLogic.js';
  import {
    enableEditMode,
    cancelEditMode,
  } from '../js/logic/common/editItem.js';
  import { getState, setState } from '../js/reducers/state.js';

  import {
    initializeModelAndUploads,
    setupUploadButton,
  } from '../js/logic/common/uploadItem.js';

  const token = '{{ token }}'; // Asegúrate de escapar correctamente
  const currentPath = '{{ currentPath }}';
  const isAuthenticated = '{{ isAuthenticated }}'; // Asegúrate de escapar correctamente
  async function fetchUserProfile() {
    try {
      const user = await loadUserProfile();
      console.log('user', user);

      setState({
        profile: {
          ...user,
          ownerModel: 'User', // Asegúrate de que el modelo esté definido
          ownerId: user, // Suponiendo que el ID del usuario está en `user.id`
        },
      });

      document.getElementById('nameInput').value = user.name || '';
      document.getElementById('surnamesInput').value = user.surnames || '';
      document.getElementById('emailInput').value = user.email || '';
      document.getElementById('genderSelect').value =
        user.gender || 'masculino';
      document.getElementById('createdAtInput').value = new Date(
        user.createdAt
      ).toLocaleDateString();
    } catch (error) {
      console.error('Error al obtener el perfil del usuario:', error);
      alert('No se pudo obtener el perfil. Intenta de nuevo más tarde.');
    }
  }
  document
    .getElementById('editButton')
    .addEventListener('click', enableEditMode);
  document
    .getElementById('cancelButton')
    .addEventListener('click', cancelEditMode);

  document
    .getElementById('profileForm')
    .addEventListener('submit', handleProfileUpdate);

  document.addEventListener('DOMContentLoaded', async () => {
    await initializeModelAndUploads(fetchUserProfile, 'profile');

    setupUploadButton(fetchUserProfile, 'profile');
  });

  document.addEventListener('DOMContentLoaded', fetchUserProfile);
</script>

{% endblock %}
