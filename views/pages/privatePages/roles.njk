{% extends "layouts/privateLayout.njk" %}

{% block content %}
<h1>Lista de Roles</h1>
<hr />

<button id="addRoleButton">Registrar Rol</button>
<section>
    <div id="roleTableContainer"></div> <!-- Contenedor donde se renderizará la tabla de roles -->
</section>

<!-- Snackbar para mostrar mensajes -->
<div id="snackbar" class="snackbar"></div>

<!-- Modal para registrar un nuevo rol -->
<div id="createRoleModal" class="modal">
    <div class="modal-content">
        <span class="close-button">&times;</span>
        <h2>Registrar Nuevo Rol</h2>
        <div id="createRoleFormContainer"></div>
    </div>
</div>

<!-- Modal para ver permisos -->
<div id="permissionsModal" class="modal">
    <div class="modal-content">
        <span class="close-button" id="closePermissionsModal">&times;</span>
        <h2>Permisos Disponibles</h2>
        <div id="permissionsContainer"></div>
        <button id="savePermissionsButton">Guardar Permisos</button>
    </div>
</div>

<!-- Modal para ver detalles de un rol -->
<div id="viewRoleModal" class="modal">
    <div class="modal-content">
        <span class="close-button">&times;</span>
        <h2>Detalles del Rol</h2>
        <div id="viewRoleFormContainer"></div>
    </div>
</div>
<!-- Modal para Confirmar Eliminación (Generico) -->
<div id="confirmDeleteModal" class="modal" style="display: none;">
    <div class="modal-content">
        <span class="close-button" id="closeConfirmDeleteModal">&times;</span>
        <h2>Confirmar Eliminación</h2>
        <p id="deleteConfirmationMessage"></p>
        <button id="confirmDeleteButton">Eliminar</button>
        <button id="cancelDeleteButton">Cancelar</button>
    </div>
</div>

<script type="module">
import { renderTable } from './js/components/common/table.js'; // Ajusta la ruta según sea necesario
import { renderPagination } from './js/components/common/pagination.js'; // Ajusta la ruta según sea necesario
import { RegisterRole } from './js/logic/roles/register.js'; 
import { loadDetails } from './js/logic/common/detailItem.js';
import { translationsRole, allowedKeysRole} from './js/logic/utils/traslates.js'
import { showDeleteConfirmationModal, handleDeleteConfirmation } from './js/logic/common/deleteItem.js'; // Ajusta la ruta según sea necesario
$(document).ready(function() {
    let currentPage = 1; // Página actual
    const rolesPerPage = 5; // Número de roles por página
    let allRoles = []; // Almacenar todos los roles
    let roleToDelete; // Variable para almacenar el rol a eliminar

    // Definición de encabezados
    const headers = ['Nombre del Rol', 'Alias', 'Descripción', 'Permisos'];

    // Inicializar la lógica de registro
    RegisterRole(fetchRoles); // Pasa la función fetchRoles para refrescar roles

    // Obtener roles cuando se carga la página
    fetchRoles();

    function fetchRoles() {
        apiFetch('/roles/api', 'GET')
            .then(response => {
                console.log('Respuesta de la API:', response);
                allRoles = response.roles; // Almacenar todos los roles
                console.log('Roles cargados:', allRoles); // Imprimir roles en consola
                renderRoles(); // Renderizar la tabla con la paginación
            })
            .catch(function(xhr) {
                console.error('Error al obtener los roles:', xhr);
                showSnackbar('Error al cargar los roles', false);
            });
    }

    // Función para renderizar roles y paginación
    function renderRoles() {
        const tableData = allRoles.map(role => ({
            _id: role._id,
            name: role.name,
            alias: role.alias,
            description: role.description || 'N/A',
            permissions: role.permissions ? role.permissions.map(p => p.name).join(', ') : 'N/A',
        
        }));

        // Renderizar la tabla
        const tableHtml = renderTable(headers, tableData, currentPage, rolesPerPage);
        $('#roleTableContainer').html(tableHtml);

        // Renderizar la paginación
        const paginationHtml = renderPagination(currentPage, allRoles.length, rolesPerPage, handlePageChange);
        $('#roleTableContainer').append(paginationHtml); // Agregar la paginación después de la tabla
    }

    // Manejar el cambio de página
    function handlePageChange(newPage) {
        currentPage = newPage; // Actualizar la página actual
        renderRoles(); // Renderizar roles y paginación nuevamente
    }

      function onAction(action, itemId, type) {
        switch (action) {
            case 'details':
                loadDetails('roles', itemId, translationsRole, allowedKeysRole)
                    .then(detailsHtml => {
                        $('#viewRoleFormContainer').html(detailsHtml);
                        $('#viewRoleModal').show();
                    })
                    .catch(error => {
                        showSnackbar(error.message, false);
                    });
                break;

            case 'delete':
                showDeleteConfirmationModal('roles', itemId, 'Rol'); // Mostrar modal de confirmación
                break;

            default:
                console.error('Acción no reconocida:', action);
        }
    }

    // Manejar clic en el botón de confirmación de eliminación
    $(document).on('click', '#confirmDeleteButton', function () {
        handleDeleteConfirmation(fetchRoles); // Pasar la función para refrescar roles
    });

    // Manejar clic en el botón de ver detalles
    $(document).on('click', '.details-button', function() {
        const roleId = $(this).data('id');
        onAction('details', roleId, 'rol'); // Llamar a onAction para mostrar detalles
    });

    // Manejar clic en el botón de eliminación
    $(document).on('click', '.delete-button', function() {
        const roleId = $(this).data('id');
        onAction('delete', roleId, 'rol'); // Llamar a onAction para eliminar
    });
    // Manejar clic en botones de paginación
    $(document).on('click', '.page-button', function() {
        const newPage = parseInt($(this).data('page'));
        handlePageChange(newPage);
    });

    window.onAction = onAction; // Hacer onAction accesible globalmente si es necesario
});
</script>

{% endblock %}
