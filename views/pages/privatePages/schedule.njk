{% extends "layouts/privateLayout.njk" %}

{% block title %}Lista de Horarios de Atención{% endblock %}

{% block content %}
  <h1 id="pageTitle">Lista de Horarios de Atención</h1>

  <div id="message"></div>

  <table id="scheduleTable" border="1" style="display:none; width:100%; border-collapse: collapse;">
    <thead>
      <tr>
     
        <th id="doctorHeader" style="display:none;">Doctor</th>
        <th>Especialidad</th>
        <th>Lunes</th>
        <th>Martes</th>
        <th>Miércoles</th>
        <th>Jueves</th>
        <th>Viernes</th>
        <th>Sábado</th>
        <th>Domingo</th>
      </tr>
    </thead>
    <tbody></tbody>
  </table>

  <script>
    async function loadSchedules() {
      try {
        const user = JSON.parse(localStorage.getItem('user'));

        // Verificar si el usuario tiene uno de los roles permitidos
        if (!user || (!user.roles.includes('Doctor') && !user.roles.includes('Administrador') && !user.roles.includes('Jefe Técnico'))) {
          document.getElementById('message').textContent = 'Acceso denegado: Solo administradores, jefes técnicos o doctores pueden ver los horarios.';
          return;
        }

        // Cambiar el título de la página si el usuario es un doctor
        if (user.roles.includes('Doctor')) {
          document.getElementById('pageTitle').textContent = 'Mis Horarios de Atención';
        } else {
          // Mostrar el encabezado de Doctor solo si el usuario no es "Doctor"
          document.getElementById('doctorHeader').style.display = 'table-cell';
        }

        // Obtener los horarios
        const response = await fetch('/schedules/all'); 
        const data = await response.json();

        if (data.message) {
          document.getElementById('message').textContent = data.message;
          return;
        }

        // Estructura para agrupar horarios por doctor
        const doctorSchedules = {};

        // Recorremos los horarios y los agrupamos por doctor y especialidad
        data.forEach(schedule => {
          const doctorName = schedule.doctor.name;

          // Si el usuario es un doctor, filtramos por su nombre
          if (user.roles.includes('Doctor') && user.name !== doctorName) {
            return;  // Solo mostrar horarios del doctor correspondiente
          }

          const specialties = schedule.doctor.specialties || [];
          const day = schedule.dayOfWeek;

          if (!doctorSchedules[doctorName]) {
            doctorSchedules[doctorName] = [];
          }

          specialties.forEach(specialty => {
            let specialtyExists = doctorSchedules[doctorName].find(s => s.Especialidad === specialty.name);

            if (!specialtyExists) {
              specialtyExists = {
                Especialidad: specialty.name,
                Lunes: 'No disponible',
                Martes: 'No disponible',
                Miércoles: 'No disponible',
                Jueves: 'No disponible',
                Viernes: 'No disponible',
                Sábado: 'No disponible',
                Domingo: 'No disponible'
              };
              doctorSchedules[doctorName].push(specialtyExists);
            }

            // Actualizar el horario del día correspondiente
            if (specialtyExists.Especialidad === specialty.name) {
              specialtyExists[day] = `${schedule.startTime} - ${schedule.endTime}`;
            }
          });
        });

        // Agregar las filas de la tabla de horarios
        const tableBody = document.querySelector('#scheduleTable tbody');
        Object.keys(doctorSchedules).forEach(doctorName => {
          const schedules = doctorSchedules[doctorName];
          
          // Crear una fila por cada especialidad
          schedules.forEach((schedule, index) => {
            const row = document.createElement('tr');
            
            // Si el usuario no es "Doctor", muestra la celda con el nombre del doctor
            row.innerHTML = `
              ${user.roles.includes('Doctor') ? '' : `<td>${index === 0 ? doctorName : ''}</td>`}  
              <td>${schedule.Especialidad}</td>
              <td>${schedule.Lunes !== 'No disponible' ? schedule.Lunes : 'No disponible'}</td>
              <td>${schedule.Martes !== 'No disponible' ? schedule.Martes : 'No disponible'}</td>
              <td>${schedule.Miércoles !== 'No disponible' ? schedule.Miércoles : 'No disponible'}</td>
              <td>${schedule.Jueves !== 'No disponible' ? schedule.Jueves : 'No disponible'}</td>
              <td>${schedule.Viernes !== 'No disponible' ? schedule.Viernes : 'No disponible'}</td>
              <td>${schedule.Sábado !== 'No disponible' ? schedule.Sábado : 'No disponible'}</td>
              <td>${schedule.Domingo !== 'No disponible' ? schedule.Domingo : 'No disponible'}</td>
            `;
            tableBody.appendChild(row);
          });
        });

        // Mostrar la tabla
        document.getElementById('scheduleTable').style.display = 'table';
      } catch (error) {
        document.getElementById('message').textContent = 'Error al obtener los horarios.';
        console.error('Error al hacer fetch de los horarios:', error);
      }
    }

    window.onload = loadSchedules;
  </script>
{% endblock %}
