{% extends "layouts/privateLayout.njk" %} {% block title %}Lista de Horarios de
Atención{% endblock %} {% block content %}
<h1 id="pageTitle">Lista de Horarios de Atención</h1>

<!-- Mensaje de éxito o error -->
<div id="message"></div>

<!-- Contenedor de la tabla donde el menú contextual debe activarse -->
<div id="tableContainer">
  <!-- Aquí se generará la tabla con la función createTable -->
</div>

<!-- Menú contextual específico para la tabla -->
<div
  id="tableContextMenu"
  class="table-context-menu"
  style="display: none"
>
  <ul>
    <li id="tableAddSchedule">Añadir Horario</li>
    <li id="tableViewDetails">Ver Detalles</li>
    <li id="tableEditSchedule">Editar Horario</li>
    <li id="tableDeleteSchedule">Eliminar Horario</li>
  </ul>
</div>

<!-- Modal para agregar especialidades -->
<div
  class="modal"
  id="scheduleModal"
  style="display: none"
>
  <div class="modal-content">
    <span
      class="close-button"
      onclick="Modal.close('#addSpecialtyModal')"
      >×</span
    >
    <h2 class="modal-title"></h2>
    <div id="modalContent"></div>
  </div>
</div>

<script type="module">
  import { createTable } from './js/generate/genericTable.js';
  import useState from './js/hooks/useState.js';
  import useEffect from './js/hooks/useEffect.js';
  import { checkUserAccess, setPageTitle } from './js/helpers.js';

  // Hook para almacenar el estado del usuario
  const [getUser, setUser] = useState('user', null);

  // Función para agrupar los horarios por doctor y especialidad
  function groupSchedules(data, user) {
    return Object.keys(data).reduce((acc, doctorName) => {
      const doctorSchedules = data[doctorName];
      if (user.roles.includes('Doctor') && user.name !== doctorName) return acc;

      doctorSchedules.forEach((schedule) => {
        const specialtyName = schedule.Especialidad;
        if (!acc[doctorName]) acc[doctorName] = [];
        let specialtyExists = acc[doctorName].find(
          (s) => s.Especialidad === specialtyName
        );
        if (!specialtyExists) {
          specialtyExists = {
            Especialidad: specialtyName,
            Lunes: 'No disponible',
            Martes: 'No disponible',
            Miércoles: 'No disponible',
            Jueves: 'No disponible',
            Viernes: 'No disponible',
            Sábado: 'No disponible',
            Domingo: 'No disponible',
          };
          acc[doctorName].push(specialtyExists);
        }

        if (schedule.horarios && Array.isArray(schedule.horarios)) {
          schedule.horarios.forEach((horario) => {
            specialtyExists[
              horario.dayOfWeek
            ] = `${horario.startTime} - ${horario.endTime}`;
          });
        } else {
          console.warn(
            'El horario no tiene la propiedad "horarios" o no es un array:',
            schedule
          );
        }
      });
      return acc;
    }, {});
  }

  // Función para generar las filas de la tabla
  function generateTableRows(doctorSchedules) {
    const schedulesData = [];
    Object.keys(doctorSchedules).forEach((doctorName) => {
      doctorSchedules[doctorName].forEach((schedule, index) => {
        if (
          Object.values(schedule).every(
            (val) => val === 'No disponible' || val === 'Especialidad'
          )
        )
          return;
        schedulesData.push({
          Doctor: index === 0 ? doctorName : '',
          Especialidad: schedule.Especialidad,
          Lunes: schedule.Lunes,
          Martes: schedule.Martes,
          Miércoles: schedule.Miércoles,
          Jueves: schedule.Jueves,
          Viernes: schedule.Viernes,
          Sábado: schedule.Sábado,
          Domingo: schedule.Domingo,
          Colspan: 1,
        });
      });
    });
    return schedulesData;
  }

  // Función para cargar los horarios
  async function loadSchedules() {
    try {
      const user = getUser();
      if (!checkUserAccess(user)) return;
      setPageTitle(user);

      const response = await fetch('/schedules/all');
      const data = await response.json();
      console.log(data);
      if (data.message) {
        document.getElementById('message').textContent = data.message;
        return;
      }

      const doctorSchedules = groupSchedules(data, user);
      const schedulesData = generateTableRows(doctorSchedules);

      const headers = [
        'Doctor',
        'Especialidad',
        'Lunes',
        'Martes',
        'Miércoles',
        'Jueves',
        'Viernes',
        'Sábado',
        'Domingo',
      ];

      createTable(
        headers,
        schedulesData,
        document.getElementById('tableContainer'),
        { hideDoctorColumn: user.roles.includes('Doctor') }
      );
    } catch (error) {
      document.getElementById('message').textContent =
        'Error al obtener los horarios.';
      console.error('Error al obtener los horarios:', error);
    }
  }

  // Cargar los horarios cuando se carga la página
  useEffect(() => {
    loadSchedules();
  }, [getUser()]);

  // Función para manejar la creación del horario
  document.addEventListener('click', async (event) => {
    if (event.target && event.target.id === 'submitAddSchedule') {
      const doctor = document.getElementById('doctor').value;
      const dayOfWeek = document.getElementById('dayOfWeek').value;
      const startTime = document.getElementById('startTime').value;
      const endTime = document.getElementById('endTime').value;

      if (!doctor || !dayOfWeek || !startTime || !endTime) {
        alert('Por favor, complete todos los campos.');
        return;
      }

      const scheduleData = { doctor, dayOfWeek, startTime, endTime };

      try {
        const response = await fetch('/schedules', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(scheduleData),
        });

        const data = await response.json();

        if (response.ok) {
          document.getElementById('message').textContent =
            'Horario creado exitosamente.';
          document.getElementById('message').classList.add('success');
          Modal.close('#addScheduleModal'); // Cerrar el modal
          loadSchedules(); // Recargar la lista de horarios
        } else {
          document.getElementById('message').textContent =
            data.message || 'Error al crear el horario.';
          document.getElementById('message').classList.add('error');
        }
      } catch (error) {
        console.error('Error al crear el horario:', error);
        document.getElementById('message').textContent =
          'Error al crear el horario.';
        document.getElementById('message').classList.add('error');
      }
    }
  });
</script>

{% endblock %}
