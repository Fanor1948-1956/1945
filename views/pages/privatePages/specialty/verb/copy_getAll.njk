<button id="openModalBtn">Abrir Modal con PaginaciÃ³n</button>

<div
  id="myModal"
  class="customModal"
>
  <div class="customModal-content">
    <div class="customModal-header">
      <h2 class="customModal-title"></h2>
      <span
        class="close-button"
        onclick="Modal.close('#myModal')"
        isEditable="true"
        >Ã—</span
      >
    </div>
    <div
      class="customModal-body"
      id="modalBody"
    ></div>
    <!-- Este es el contenedor donde insertarÃ¡s el contenido -->
    <div class="customModal-footer"></div>
  </div>
</div>

<script type="module">
  import { customModal } from '../js/components/common/modal.js';
  import { renderCards } from '../js/renders/renderCards.js';
  import { fetchSpecialty } from '../js/services/loadFetchs.js';
  import { getState } from '../js/reducers/state.js';
  import { loadUserProfile } from '../js/services/profileService.js';

  export const token = localStorage.getItem('token');
  let user = null; // Inicializamos user en null

  // âœ… Nueva funciÃ³n modular para obtener y filtrar especialidades
  const loadSpecialties = async () => {
    try {
      await fetchSpecialty(); // ðŸ”¹ Cargar especialidades desde la API
      const specialties = getState().specialties;

      // ðŸ”¹ Si hay token, obtener perfil del usuario
      if (token) {
        user = await loadUserProfile();
        console.log('Perfil del usuario:', user);

        // ðŸ”¹ Verificamos si el usuario es un doctor
        const isDoctor = user.roles.some((role) => role.name === 'Doctor');

        // ðŸ”¹ Si el usuario es doctor, tomamos solo sus especialidades
        const userSpecialties = isDoctor ? user.specialties : specialties;

        console.log('Especialidades a mostrar:', userSpecialties);
        return userSpecialties;
      }

      // ðŸ”¹ Si no hay token, devolver todas las especialidades
      console.log('Usuario no autenticado, mostrando todas las especialidades');
      return specialties;
    } catch (error) {
      console.error('Error al cargar especialidades:', error);
      return [];
    }
  };

  // âœ… Evento para abrir el modal
  document
    .getElementById('openModalBtn')
    .addEventListener('click', async () => {
      const specialties = await loadSpecialties(); // ðŸ”¹ Llamar la funciÃ³n modular
      const cardsContainer = renderCards(specialties);

      customModal(
        'myModal',
        'fullscreen',
        'Especialidades',
        '#ffffff',
        specialties,
        cardsContainer,
        '',
        'pagination'
      );
    });
</script>
