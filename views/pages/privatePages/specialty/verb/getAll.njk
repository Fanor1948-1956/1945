<button
  id="addSpecialtyBtn"
  class="add-button"
  style="display: none"
>
  Agregar Especialidad
</button>

<button
  id="selectedSpecialtyBtn"
  class="add-button"
  style="display: none"
>
  Añadir Especialidad
</button>

<div
  id="specialityContainer"
  class="contentContainer"
></div>

<!-- Modal para agregar especialidades -->
<div
  class="modal"
  id="addSpecialtyModal"
  style="display: none"
>
  <div class="modal-content">
    <span
      class="close-button"
      onclick="Modal.close('#addSpecialtyModal')"
      >×</span
    >
    <h2 class="modal-title"></h2>
    <div id="inputContainer"></div>
    <!-- Contenedor dinámico para los inputs -->
    <button id="saveSpecialtyBtn">Guardar</button>
  </div>
</div>

<!-- Modal para seleccionar especialidades -->
<div
  class="modal"
  id="selectSpecialtyModal"
  style="display: none"
>
  <div class="modal-content">
    <span
      class="close-button"
      onclick="Modal.close('#selectSpecialtyModal')"
      >×</span
    >
    <h2 class="modal-title">Seleccionar Especialidades</h2>
    <div id="specialtiesCheckboxesContainer"></div>
    <!-- Contenedor para checkboxes dinámicos -->
    <button id="saveSelectedSpecialtiesBtn">Guardar</button>
  </div>
</div>

{% include "components/custom/customPopover.njk" %} {% include
"components/custom/common/deleteItem.njk" %}

<script type="module">
  import { saveItem } from '../js/logic/itemLogic/index.js';
  import {
    loadSpecialties,
    addSpecialty,
    updateSpecialty,
    deleteSpecialty,
  } from '../js/reducers/index.js';
  import {
    fetchServices,
    createService,
    updateService,
    deleteService,
  } from '../js/services/index.js';
  import { renderSubItemsCheckboxesForSelection } from '../js/utils/subItemUtils.js';
  import { updateUserProfile } from '../js/services/profileService.js';
  import { getState, setState } from '../js/reducers/state.js';
  import { fetchSpecialty } from '../js/services/loadFetchs.js';
  import {
    specialtyEndpoints,
    userEndpoints,
  } from '../js/config/apiEndpoints.js';
  import { createCustomInputs } from '../js/components/custom/input.js';
  import { specialtyInputConfigs } from '../js/dinamic/input/private/pages/inputSpecialty.js';
  import { renderItems } from '../js/renders/renderItems.js';
  import { specialtyRenderer } from '../js/renders/itemRender.js';
  import { openModal, closeModal } from '../js/components/custom/modal.js';
  import useEffect from '../js/hooks/useEffect.js';
  import { loadUserProfile } from '../js/services/profileService.js';

  const headers = ['Nombre', 'Descripción', 'Estado'];
  let currentEditingSpecialtyId = null;
  let currentPage = 1;
  const selectedSpecialties = [];
  let filteredSpecialties = [];
  const specialtyPerPage = 9;
  const isPublic = '{{ isPublic|dump}}';
  let user;
  // Recuperamos el valor cifrado de `localStorage`
  const encryptedcurrentView = localStorage.getItem('currentView');

  // Desencriptamos el valor con la misma clave de cifrado
  const bytes = CryptoJS.AES.decrypt(encryptedcurrentView, 'secret-key');
  const currentView = bytes.toString(CryptoJS.enc.Utf8);

  const loadProfile = async () => {
    user = await loadUserProfile();
    console.log('Perfil del usuario:', user);
    updateButtonTextAndAction();
  };

  export const token = localStorage.getItem('token');

  const loadSpecialtiesData = async () => {
    try {
      if (!token) {
        console.warn(
          'Token es null, solo se cargarán las especialidades globales.'
        );

        // Cargamos solo las especialidades globales si el token es null
        await fetchSpecialty();
        const specialties = getState().specialties;

        renderItems(
          currentView,
          specialties,
          headers,
          currentPage,
          specialtyPerPage,
          'specialityContainer',
          specialtyRenderer,
          isPublic
        );
      } else {
        if (!user || !user.roles) {
          console.error('Usuario no cargado correctamente o no tiene roles');
          return;
        }

        // Cargamos las especialidades globales
        await fetchSpecialty();
        const specialties = getState().specialties;

        // Verificamos si el usuario es un doctor
        const isDoctor = user.roles.some((role) => role.name === 'Doctor');

        // Si el usuario es un doctor, tomamos solo las especialidades asignadas a él
        const userSpecialties = isDoctor ? user.specialties : specialties;

        console.log('Especialidades a mostrar:', userSpecialties);

        renderItems(
          currentView,
          userSpecialties,
          headers,
          currentPage,
          specialtyPerPage,
          'specialityContainer',
          specialtyRenderer,
          isPublic
        );
      }
    } catch (error) {
      console.error('Error al cargar las especialidades:', error);
    }
  };

  const updateButtonTextAndAction = () => {
    const isDoctor =
      user && user.roles && user.roles.some((role) => role.name === 'Doctor');
    const addSpecialtyBtn = document.getElementById('addSpecialtyBtn');
    const selectedSpecialtyBtn = document.getElementById(
      'selectedSpecialtyBtn'
    );

    if (isDoctor) {
      selectedSpecialtyBtn.style.display = 'inline-block';
      selectedSpecialtyBtn.innerText = 'Añadir Especialidad';
      selectedSpecialtyBtn.onclick = openSelectSpecialtyModal;
      addSpecialtyBtn.style.display = 'none';
    } else {
      addSpecialtyBtn.style.display = 'inline-block';
      addSpecialtyBtn.innerText = 'Agregar Especialidad';
      addSpecialtyBtn.onclick = openAddSpecialtyForm;
      selectedSpecialtyBtn.style.display = 'none';
    }
  };

  const initializeModalInputs = () => {
    const inputContainer = document.getElementById('inputContainer');
    inputContainer.innerHTML = '';
    const inputs = createCustomInputs(specialtyInputConfigs);
    inputContainer.appendChild(inputs);
  };

  const openAddSpecialtyForm = () => {
    currentEditingSpecialtyId = null;
    initializeModalInputs();
    openModal('addSpecialtyModal', 'small', 'Registrar Especialidad');
  };

  const openSelectSpecialtyModal = () => {
    const specialties = getState().specialties;
    const specialtiesContainer = 'specialtiesCheckboxesContainer';
    renderSubItemsCheckboxesForSelection(
      specialties,
      user.specialties || [],
      specialtiesContainer
    );
    openModal('selectSpecialtyModal', 'medium', 'Seleccionar Especialidades');
  };

  const saveSpecialty = async () => {
    const name = document.getElementById('specialtyName').value.trim();
    const description = document
      .getElementById('specialtyDescription')
      .value.trim();

    if (!name || !description) {
      showSnackbar('Por favor, complete todos los campos.', false);
      return;
    }

    const data = {
      name,
      description,
      ...(currentEditingSpecialtyId && { _id: currentEditingSpecialtyId }),
    };

    try {
      let message;
      if (currentEditingSpecialtyId) {
        message = await updateService(
          data,
          specialtyEndpoints,
          updateSpecialty
        );
      } else {
        message = await createService(data, specialtyEndpoints, addSpecialty);
      }

      Modal.close('#addSpecialtyModal');
      await loadSpecialtiesData();
      showSnackbar(message, true);
    } catch (error) {
      showSnackbar('Error al guardar la especialidad.', false);
    }
  };

  const saveSelectedSpecialties = async () => {
    const checkboxes = document.querySelectorAll(
      '#specialtiesCheckboxesContainer input[type="checkbox"]:checked'
    );

    // Limpiar las especialidades seleccionadas antes de añadir las nuevas
    const selectedSpecialties = [];
    checkboxes.forEach((checkbox) => selectedSpecialties.push(checkbox.value));

    // Verificar si el usuario es un Doctor
    if (
      user &&
      user.roles &&
      user.roles.some((role) => role.name === 'Doctor')
    ) {
      try {
        // Actualizar el perfil del usuario con las especialidades seleccionadas
        const updatedUser = {
          ...user,
          specialties: selectedSpecialties, // Asignar las especialidades seleccionadas al usuario
        };

        await updateUserProfile(updatedUser);

        closeModal('selectSpecialtyModal');
        await loadProfile();

        await loadSpecialtiesData();
        // Mostrar mensaje de éxito
        showSnackbar('Especialidades actualizadas correctamente.', true);
      } catch (error) {
        // Mostrar mensaje de error en caso de fallar
        showSnackbar('Error al guardar las especialidades.', false);
      }
    } else {
      // Mostrar mensaje de error si no es un Doctor o el usuario no tiene el rol adecuado
      showSnackbar('No se pudo actualizar el perfil del doctor.', false);
    }
  };

  const handleDeleteItem = async (id) => {
    try {
      const responseMessage = await deleteService(
        id,
        specialtyEndpoints,
        deleteSpecialty
      );
      await loadSpecialtiesData();
      showSnackbar(responseMessage, true);
    } catch (error) {
      console.error('Error al eliminar:', error);
      showSnackbar('Error al eliminar la especialidad.', false);
    }
  };

  const setupEventListeners = () => {
    document
      .getElementById('saveSpecialtyBtn')
      .addEventListener('click', saveSpecialty);
    document
      .getElementById('saveSelectedSpecialtiesBtn')
      .addEventListener('click', saveSelectedSpecialties);
  };

  const onAction = (action, id) => {
    const specialties = getState().specialties;
    const selectedSpecialty = specialties.find(
      (specialty) => specialty._id === id
    );

    if (!selectedSpecialty) {
      showSnackbar('Especialidad no encontrada.', false);
      return;
    }

    if (action === 'edit') {
      initializeModalInputs();
      const nameInput = document.getElementById('specialtyName');
      const descriptionInput = document.getElementById('specialtyDescription');

      if (nameInput && descriptionInput) {
        nameInput.value = selectedSpecialty.name;
        descriptionInput.value = selectedSpecialty.description;
        currentEditingSpecialtyId = id;
        openModal('addSpecialtyModal', 'small', 'Editar Especialidad');
      } else {
        showSnackbar('Error al cargar los campos de especialidad.', false);
      }
    } else if (action === 'delete') {
      openModal('deleteItemModal', 'small', 'Confirmar Eliminación');
      document.getElementById('confirmDeleteButton').onclick = async () => {
        await handleDeleteItem(id);
        closeModal('deleteItemModal');
      };
    }
  };

  useEffect(() => {
    const initializeData = async () => {
      if (token) {
        // Si el token está presente, cargamos el perfil
        await loadProfile();
        // Independientemente de si el token es válido o no, cargamos las especialidades
        loadSpecialtiesData();
        setupEventListeners();
      } else {
        console.warn('Token es null, no se cargará el perfil.');
      }
      loadSpecialtiesData();
    };

    initializeData();
  }, []);

  window.onAction = onAction;
</script>
