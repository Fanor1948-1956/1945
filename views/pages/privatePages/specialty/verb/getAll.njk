{% if isAuthenticated %} {% endif %}

<button
  id="addSpecialtyBtn"
  class="add-button"
  {%
  if
  not
  isAuthenticated
  %}
  style="display: none"
  {%
  endif
  %}
>
  Agregar Especialidad
</button>

<div
  id="snackbar"
  class="snackbar"
></div>
<div id="tableContainer"></div>

<!-- Modal para agregar especialidades -->
<div
  class="modal"
  id="addSpecialtyModal"
  style="display: none"
>
  <div class="modal-content">
    <span
      class="close-button"
      onclick="Modal.close('#addSpecialtyModal')"
      >×</span
    >
    <h2 class="modal-title"></h2>
    <div id="inputContainer"></div>
    <!-- Contenedor dinámico para los inputs -->
    <button id="saveSpecialtyBtn">Guardar</button>
  </div>
</div>

{% include "components/custom/customPopover.njk" %} {% include
"components/custom/common/deleteItem.njk" %}

<script type="module">
  import { saveItem } from '../js/logic/itemLogic/index.js';
  import {
    loadSpecialties,
    addSpecialty,
    updateSpecialty,
    deleteSpecialty,
  } from '../js/reducers/index.js';
  import {
    createService,
    updateService,
    deleteService,
  } from '../js/services/index.js';
  import { getState } from '../js/reducers/state.js';
  import { fetchSpecialty } from '../js/services/loadFetchs.js';
  import { specialtyEndpoints } from '../js/config/apiEndpoints.js';
  import { createCustomInputs } from '../js/components/custom/input.js';
  import { specialtyInputConfigs } from '../js/dinamic/input/private/pages/inputSpecialty.js';
  import { renderItems } from '../js/renders/renderItems.js';
  import { specialtyRenderer } from '../js/renders/itemRender.js';
  import { openModal, closeModal } from '../js/components/custom/modal.js';

  const headers = ['Nombre', 'Descripción', 'Estado'];
  let currentEditingSpecialtyId = null;
  let currentPage = 1;
  const specialtyPerPage = 10;

  let currentView = 'table';

  // Initialize modal inputs
  const initializeModalInputs = () => {
    const inputContainer = document.getElementById('inputContainer');
    inputContainer.innerHTML = ''; // Clear previous inputs
    const inputs = createCustomInputs(specialtyInputConfigs);
    inputContainer.appendChild(inputs);
  };

  // Load specialties and render them
  const loadSpecialtiesData = async () => {
    await fetchSpecialty();
    const specialties = getState().specialties;
    renderItems(
      currentView,
      specialties,
      headers,
      currentPage,
      specialtyPerPage,
      document.getElementById('tableContainer'),
      specialtyRenderer
    );
  };

  // Set up event listeners
  const setupEventListeners = () => {
    document.getElementById('addSpecialtyBtn').addEventListener('click', () => {
      currentEditingSpecialtyId = null;
      initializeModalInputs(); // Prepare modal inputs
      openModal('addSpecialtyModal', 'medium', 'Registro de Especialidad');
    });

    document
      .getElementById('saveSpecialtyBtn')
      .addEventListener('click', saveSpecialty);
  };

  const handleDeleteItem = async (id) => {
    try {
      const responseMessage = await deleteService(
        id,
        specialtyEndpoints,
        deleteSpecialty
      );
      await loadSpecialtiesData();
      showSnackbar(responseMessage, true);
    } catch (error) {
      console.error('Error al eliminar:', error);
      showSnackbar('Error al eliminar la especialidad.', false);
    }
  };

  const onAction = (action, id) => {
    const specialties = getState().specialties;
    const selectedSpecialty = specialties.find(
      (specialty) => specialty._id === id
    );

    if (!selectedSpecialty) {
      showSnackbar('Especialidad no encontrada.', false);
      return;
    }

    if (action === 'edit') {
      initializeModalInputs();
      const nameInput = document.getElementById('specialtyName');
      const descriptionInput = document.getElementById('specialtyDescription');

      if (nameInput && descriptionInput) {
        nameInput.value = selectedSpecialty.name;
        descriptionInput.value = selectedSpecialty.description;
        currentEditingSpecialtyId = id;
        openModal('addSpecialtyModal', 'medium', 'Editar Especialidad');
      } else {
        showSnackbar('Error al cargar los campos de especialidad.', false);
      }
    } else if (action === 'delete') {
      // Abrir el modal de confirmación
      openModal('deleteItemModal', 'small', 'Confirmar Eliminación');

      // Manejar la confirmación de eliminación
      document.getElementById('confirmDeleteButton').onclick = async () => {
        await handleDeleteItem(id); // Llama a la función de eliminación
        closeModal('deleteItemModal'); // Cierra el modal después de eliminar
      };
    }
  };

  // Save or update a specialty
  const saveSpecialty = async () => {
    const name = document.getElementById('specialtyName').value.trim();
    const description = document
      .getElementById('specialtyDescription')
      .value.trim();

    if (!name || !description) {
      showSnackbar('Por favor, complete todos los campos.', false);
      return;
    }

    const data = {
      name,
      description,
      ...(currentEditingSpecialtyId && { _id: currentEditingSpecialtyId }),
    };

    try {
      const message = currentEditingSpecialtyId
        ? await updateService(data, specialtyEndpoints, updateSpecialty)
        : await createService(data, specialtyEndpoints, addSpecialty);

      Modal.close('#addSpecialtyModal');
      loadSpecialtiesData(); // Reload specialties after save
      showSnackbar(message, true);
    } catch (error) {
      showSnackbar('Error al guardar la especialidad.', false);
    }
  };

  // Initial function calls
  loadSpecialtiesData();
  setupEventListeners();
  window.onAction = onAction;
</script>
