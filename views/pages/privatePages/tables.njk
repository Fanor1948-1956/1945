{% extends "layouts/privateLayout.njk" %} {% block content %}
<h1>Gráfico Chart en Tiempo Real</h1>

<!-- Selección de modelo -->
<label for="modelNameSelect">Selecciona un modelo:</label>
<select id="modelNameSelect">
  <option value="User">Usuario</option>
  <option value="Role">Rol</option>
  <option value="Permission">Permiso</option>
  <option value="Specialty">Especialidades</option>
  <option value="Chart">Estadísticas</option>
</select>

<!-- Selección de Año -->
<label for="yearSelect">Selecciona un año:</label>
<select id="yearSelect">
  <!-- Los años serán cargados dinámicamente aquí -->
</select>

<!-- Opciones de vista de gráficos (incluye "quick" y "particular") -->
<label for="viewOption">Selecciona cómo ver los gráficos:</label>
<select id="viewOption">
  <option
    value="quick"
    selected
  >
    Visualización Rápida
  </option>
  <option value="particular">Visualización Particular</option>
</select>

<!-- Contenedor para el botón de generar gráfico -->
<div id="buttonContainer">
  <button
    id="generateChartBtn"
    style="display: none"
  >
    Generar Gráfico
  </button>
  <button id="generateReportBtn">Generar Reporte PDF</button>
</div>

<!-- Selección de tipo de gráfico -->
<label for="chartTypeSelect">Selecciona el tipo de gráfico:</label>
<select id="chartTypeSelect">
  <option
    value="line"
    selected
  >
    Línea
  </option>
  <option value="bar">Barras</option>
  <option value="radar">Radar</option>
  <option value="pie">Tarta</option>
</select>

<!-- Contenedor para mostrar los gráficos -->
<div id="chartContainer"></div>

<!-- Agregar Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
  // Función para cargar los años disponibles en el select
  async function loadYears(modelName) {
    try {
      const response = await fetch(
        `/chart/generate-charts?modelName=${modelName}`
      );
      const data = await response.json();

      // Limpiar el select de años
      const yearSelect = document.getElementById('yearSelect');
      yearSelect.innerHTML = ''; // Limpiar años anteriores

      // Añadir las opciones de año
      data.availableYears.forEach((yearObj) => {
        const option = document.createElement('option');
        option.value = yearObj.year;
        option.textContent = yearObj.year;
        yearSelect.appendChild(option);
      });

      // Llamar a la función para actualizar los gráficos con el año y modelo seleccionados
      handleChartChange();
    } catch (error) {
      console.error('Error al cargar los años:', error);
    }
  }

  // Función para crear el gráfico en tiempo real
  function createChart(chartData, modelName, chartType, viewOption) {
    const chartOptions = {
      responsive: true,
      backgroundColor: 'black',
      plugins: {
        legend: {
          labels: {
            color: 'white',
          },
        },
      },
      scales: {
        x: {
          title: {
            display: true,
            text: 'Meses',
            color: 'white',
          },
          grid: {
            color: 'gray',
          },
        },
        y: {
          title: {
            display: true,
            text: 'Número de Registros',
            color: 'white',
          },
          grid: {
            color: 'gray',
          },
        },
      },
    };

    // Si la opción seleccionada es "particular", crear gráficos en contenedores separados
    if (viewOption === 'particular') {
      // Crear un nuevo contenedor para el gráfico
      const chartDiv = document.createElement('div');
      chartDiv.className = 'chart-div';
      chartDiv.style.marginBottom = '20px'; // Espacio entre gráficos

      const ctx = document.createElement('canvas');
      ctx.id = `chart-${modelName}-${Date.now()}`;
      chartDiv.appendChild(ctx);
      document.getElementById('chartContainer').appendChild(chartDiv);

      // Crear el gráfico
      new Chart(ctx, {
        type: chartType,
        data: chartData.data,
        options: chartOptions,
      });
    }
    // Si es "quick", reemplazar el gráfico en el mismo contenedor
    else {
      // Limpiar el contenedor de gráficos antes de crear uno nuevo
      const chartContainer = document.getElementById('chartContainer');
      chartContainer.innerHTML = ''; // Eliminar los gráficos anteriores

      // Crear el gráfico en el mismo contenedor
      const ctx = document.createElement('canvas');
      ctx.id = `chart-${modelName}`;
      chartContainer.appendChild(ctx);

      // Crear el gráfico
      new Chart(ctx, {
        type: chartType,
        data: chartData.data,
        options: chartOptions,
      });
    }
  }

  // Función para manejar los cambios en el tipo de gráfico o año
  async function handleChartChange() {
    const modelName = document.getElementById('modelNameSelect').value;
    const viewOption = document.getElementById('viewOption').value;
    const chartType = document.getElementById('chartTypeSelect').value;
    const year = document.getElementById('yearSelect').value; // Obtener el año seleccionado

    try {
      const response = await fetch(
        `/chart/generate-charts?modelName=${modelName}&year=${year}`
      );
      const data = await response.json();

      if (data.charts) {
        // Filtrar los gráficos por el modelo seleccionado
        const filteredCharts = data.charts.filter(
          (chart) => chart.modelName === modelName
        );

        // Crear gráficos según la opción de vista seleccionada
        filteredCharts.forEach((chart) => {
          createChart(
            {
              data: {
                labels: chart.months.map((month) => `Mes ${month.month}`),
                datasets: [
                  {
                    label: `${chart.modelName} - Registros Activos`,
                    data: chart.months.map((month) => month.activeRecords),
                    borderColor: 'rgba(75, 192, 192, 1)',
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    fill: false,
                  },
                  {
                    label: `${chart.modelName} - Registros Inactivos`,
                    data: chart.months.map((month) => month.inactiveRecords),
                    borderColor: 'rgba(255, 99, 132, 1)',
                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                    fill: false,
                  },
                ],
              },
            },
            modelName,
            chartType,
            viewOption
          );
        });
      }
    } catch (error) {
      console.error('Error al obtener los gráficos:', error);
    }
  }

  // Evento para manejar el cambio de tipo de gráfico o año
  document
    .getElementById('chartTypeSelect')
    .addEventListener('change', handleChartChange);
  document
    .getElementById('yearSelect')
    .addEventListener('change', handleChartChange);
  document
    .getElementById('modelNameSelect')
    .addEventListener('change', function () {
      loadYears(this.value); // Cargar años cuando el modelo cambia
    });

  // Función para ocultar o mostrar el botón de generar gráfico según la vista seleccionada
  function toggleGenerateChartButton() {
    const viewOption = document.getElementById('viewOption').value;
    const generateChartBtn = document.getElementById('generateChartBtn');

    // Mostrar solo si la opción seleccionada es 'particular'
    if (viewOption === 'particular') {
      generateChartBtn.style.display = 'inline-block';
    } else {
      generateChartBtn.style.display = 'none';
    }
  }

  // Detectar cambios en la opción de vista
  document
    .getElementById('viewOption')
    .addEventListener('change', toggleGenerateChartButton);

  // Llamar a la función cuando la página cargue para generar el gráfico por defecto
  document.addEventListener('DOMContentLoaded', function () {
    const modelName = document.getElementById('modelNameSelect').value;
    loadYears(modelName); // Cargar los años para el modelo por defecto
    handleChartChange();
    toggleGenerateChartButton(); // Asegurarse de que el botón esté correctamente mostrado u oculto
  });

  document
    .getElementById('generateReportBtn')
    .addEventListener('click', function () {
      const modelName = document.getElementById('modelNameSelect').value;
      const year = document.getElementById('yearSelect').value;
      const chartType = document.getElementById('chartTypeSelect').value; // Obtener el tipo de gráfico seleccionado

      if (!modelName || !year) {
        alert('Por favor selecciona un modelo y un año');
        return;
      }

      // Hacer la petición para generar el reporte, incluyendo el tipo de gráfico
      window.location.href = `/chart/generate-report?modelName=${modelName}&year=${year}&chartType=${chartType}`;
    });
</script>

{% endblock %}
