{# <!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0"
    />
    <title>Selección de Género</title>
    <style>
      /* Estilo básico del botón */
      .gender-button {
        padding: 10px;
        background-color: #007bff;
        color: white;
        border: none;
        cursor: pointer;
      }

      .gender-button:hover {
        background-color: #0056b3;
      }

      /* Dropdown colapsable */
      .dropdown {
        position: fixed; /* Para mantener la posición fija */
        display: none;
        background-color: #fff;
        border: 1px solid #ccc;
        border-radius: 8px;
        box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2);
        width: 200px;
        z-index: 9999; /* Para estar sobre cualquier otro contenido */
      }

      .dropdown.show {
        display: block;
      }

      .gender-option {
        padding: 10px;
        cursor: pointer;
        text-align: left;
        background-color: #f0f0f0;
        border-bottom: 1px solid #ccc;
      }

      .gender-option:last-child {
        border-bottom: none;
      }

      .gender-option:hover {
        background-color: #e0e0e0;
      }

      /* Flecha que indica colapso */
      .arrow {
        margin-left: 5px;
        display: inline-block;
        transform: rotate(0deg);
        transition: transform 0.3s ease;
      }

      .arrow.down {
        transform: rotate(180deg);
      }

      /* Para simular elevación */
      .elevated {
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1),
          0px 8px 16px rgba(0, 0, 0, 0.2);
      }
    </style>
  </head>
  <body>
    <!-- Botón que abre el dropdown de selección de género -->
    <button
      id="genderButton"
      class="gender-button"
    >
      Seleccionar Género <span class="arrow">▼</span>
    </button>

    <!-- Dropdown colapsable de selección de género -->
    <div
      id="genderDropdown"
      class="dropdown elevated"
    >
      <div
        class="gender-option"
        data-gender="masculino"
      >
        Masculino
      </div>
      <div
        class="gender-option"
        data-gender="femenino"
      >
        Femenino
      </div>
      <div
        class="gender-option"
        data-gender="otro"
      >
        Otro
      </div>
      <div
        class="gender-option"
        data-gender="no-binario"
      >
        No Binario
      </div>
      <div
        class="gender-option"
        data-gender="prefiero-no-decirlo"
      >
        Prefiero No Decirlo
      </div>
    </div>

    <input
      type="hidden"
      id="userGender"
      name="userGender"
    />
    {% include "pages/privatePages/users/list.njk" %}
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        setupGenderDropdown(); // Configura la selección de género y colapso
      });

      // Función para abrir/cerrar el dropdown y manejar la selección de género
      const setupGenderDropdown = () => {
        const genderButton = document.getElementById('genderButton');
        const genderDropdown = document.getElementById('genderDropdown');
        const arrow = genderButton.querySelector('.arrow');

        // Alterna el dropdown al hacer clic en el botón
        genderButton.addEventListener('click', () => {
          const isOpen = genderDropdown.classList.contains('show');
          if (isOpen) {
            genderDropdown.classList.remove('show');
            arrow.classList.remove('down');
          } else {
            genderDropdown.classList.add('show');
            arrow.classList.add('down');
            adjustDropdownPlacement(genderButton, genderDropdown); // Ajustar la colocación
          }
        });

        // Cierra el dropdown si se hace clic fuera de él
        document.addEventListener('click', (event) => {
          if (
            !genderButton.contains(event.target) &&
            !genderDropdown.contains(event.target)
          ) {
            genderDropdown.classList.remove('show');
            arrow.classList.remove('down');
          }
        });

        // Maneja la selección de género
        document.querySelectorAll('.gender-option').forEach((option) => {
          option.addEventListener('click', (event) => {
            const selectedGender = option.getAttribute('data-gender');
            document.getElementById('userGender').value = selectedGender; // Actualiza el campo oculto
            genderButton.innerHTML = `${option.textContent} <span class="arrow down">▼</span>`; // Actualiza el texto del botón
            genderDropdown.classList.remove('show'); // Oculta el dropdown
            arrow.classList.remove('down');
          });
        });
      };

      // Función para ajustar la colocación del dropdown
      const adjustDropdownPlacement = (button, dropdown) => {
        const buttonRect = button.getBoundingClientRect(); // Posición del botón
        const dropdownRect = dropdown.getBoundingClientRect(); // Posición del dropdown
        const windowHeight = window.innerHeight;
        const windowWidth = window.innerWidth;

        // Iniciar colocación predeterminada (debajo del botón)
        let top = buttonRect.bottom;
        let left = buttonRect.left;

        // Verificar si hay espacio abajo, de lo contrario, colocar arriba
        if (buttonRect.bottom + dropdownRect.height > windowHeight) {
          top = buttonRect.top - dropdownRect.height;
        }

        // Verificar si hay espacio a la derecha, de lo contrario, colocar a la izquierda
        if (buttonRect.left + dropdownRect.width > windowWidth) {
          left = buttonRect.right - dropdownRect.width;
        }

        // Asignar la nueva posición al dropdown
        dropdown.style.top = `${top}px`;
        dropdown.style.left = `${left}px`;
      };
    </script>
  </body>
</html>
#} 

{% extends "layouts/privateLayout.njk" %} {% block content %}
<h1>Lista de Roles</h1>
<hr />

<section>
  <div id="roleTableContainer"></div>
  <!-- Contenedor donde se renderizará la tabla de roles -->
</section>

<!-- Snackbar para mostrar mensajes -->
<div
  id="snackbar"
  class="snackbar"
></div>

<script type="module">
  import { renderTable } from '../js/components/common/table.js'; // Ajusta la ruta según sea necesario
  import { renderPagination } from '../js/components/common/pagination.js'; // Ajusta la ruta según sea necesario

  $(document).ready(function () {
    let currentPage = 1; // Página actual
    const usersPerPage = 5; // Número de roles por página
    let allUsers = []; // Almacenar todos los roles
    let userToDelete = null; // Almacenar el ID del rol a eliminar

    // Definición de encabezados
    const headers = [
      'Nombre',
      'Apellidos',
      'Correo',
      'Contraseña',
      'Género',
      'Roles',
    ];

    // Obtener users cuando se carga la página
    fetchUsers();

    function fetchUsers() {
      apiFetch('/users/getUsers', 'GET')
        .then((response) => {
          console.log('Respuesta de la API:', response);
          allUsers = response.users; // Almacenar todos los roles
          console.log('Roles cargados:', allUsers); // Imprimir roles en consola
          renderUsers(); // Renderizar la tabla con la paginación
        })
        .catch(function (xhr) {
          console.error('Error al obtener los roles:', xhr);
          showSnackbar('Error al cargar los roles', false);
        });
    }

    // Función para renderizar roles y paginación
    function renderUsers() {
      const tableData = allUsers.map((user) => ({
        _id: user._id, // Asegúrate de que el ID esté aquí
        name: user.name,
        lastname: user.lastname,
        email: user.email,
        password: user.password,
        gender: user.gender,
        roles: user.roles.map((role) => role.name).join(', '), // Convertir roles a cadena separada por comas
      }));

      // Renderizar la tabla
      const tableHtml = renderTable(
        headers,
        tableData,
        currentPage,
        usersPerPage
      );
      $('#roleTableContainer').html(tableHtml);

      // Renderizar la paginación
      const paginationHtml = renderPagination(
        currentPage,
        allUsers.length,
        usersPerPage,
        handlePageChange
      );
      $('#roleTableContainer').append(paginationHtml); // Agregar la paginación después de la tabla
    }

    // Manejar el cambio de página
    function handlePageChange(newPage) {
      currentPage = newPage; // Actualizar la página actual
      renderUsers(); // Renderizar roles y paginación nuevamente
    }

    // Manejar clic en botones de paginación
    $(document).on('click', '.page-button', function () {
      const newPage = parseInt($(this).data('page'));
      handlePageChange(newPage);
    });
  });
</script>

{% endblock %}
