<section>
  <div id="roleTableContainer"></div>
  <!-- Contenedor donde se renderizará la tabla de roles -->
</section>

<!-- Snackbar para mostrar mensajes -->
<div
  id="snackbar"
  class="snackbar"
></div>

<script type="module">
  import { renderTable } from '../js/components/common/table.js'; // Ajusta la ruta según sea necesario
  import { renderPagination } from '../js/components/common/pagination.js'; // Ajusta la ruta según sea necesario

  $(document).ready(function () {
    let currentPage = 1; // Página actual
    const usersPerPage = 10; // Número de roles por página
    let allUsers = []; // Almacenar todos los users
    let filteredUsers = []; // Almacenar los roles filtrados por alias de rol

    // Definición de encabezados
    const headers = ['Nombre', 'Apellidos', 'Correo', 'Género', 'Roles'];

    // Obtener users cuando se carga la página
    fetchUsers();

    // Fetch users from the API
    function fetchUsers() {
      apiFetch('/users/getUsers', 'GET')
        .then((response) => {
          console.log('Respuesta de la API:', response);
          allUsers = response.users; // Almacenar todos los users
          console.log('users cargados:', allUsers); // Imprimir users en consola

          // Obtener el alias del rol desde la plantilla
          const roleAlias = '{{ roleAlias|lower }}'; // Recibir el argumento roleAlias
          if (roleAlias) {
            filteredUsers = allUsers.filter((user) =>
              user.roles.some(
                (roleObj) => roleObj.alias.toLowerCase() === roleAlias
              )
            );
          } else {
            filteredUsers = [...allUsers]; // Si no hay rol, mostrar todos los usuarios
          }

          renderUsers(); // Renderizar la tabla con la paginación
        })
        .catch(function (xhr) {
          console.error('Error al obtener los users:', xhr);
          showSnackbar('Error al cargar los users', false);
        });
    }

    // Función para renderizar roles y paginación
    function renderUsers() {
      // Usar filteredUsers en lugar de allUsers
      const tableData = filteredUsers.map((user) => ({
        _id: user._id, // Asegúrate de que el ID esté aquí
        name: user.name,
        lastname: user.lastname,
        email: user.email,
        gender: user.gender,
        roles: user.roles.map((role) => role.name).join(', '), // Convertir roles a cadena separada por comas
      }));

      // Renderizar la tabla
      const tableHtml = renderTable(
        headers,
        tableData,
        currentPage,
        usersPerPage
      );
      $('#roleTableContainer').html(tableHtml);

      // Renderizar la paginación
      const paginationHtml = renderPagination(
        currentPage,
        filteredUsers.length, // Cambiar allUsers.length por filteredUsers.length
        usersPerPage,
        handlePageChange
      );
      $('#roleTableContainer').append(paginationHtml); // Agregar la paginación después de la tabla
    }

    // Manejar el cambio de página
    function handlePageChange(newPage) {
      currentPage = newPage; // Actualizar la página actual
      renderUsers(); // Renderizar roles y paginación nuevamente
    }

    // Manejar clic en botones de paginación
    $(document).on('click', '.page-button', function () {
      const newPage = parseInt($(this).data('page'));
      handlePageChange(newPage);
    });

    // Función para mostrar un snackbar
    function showSnackbar(message, success) {
      const snackbar = $('#snackbar');
      snackbar.text(message);
      snackbar.toggleClass('success', success);
      snackbar.removeClass('error');
      snackbar.removeClass('show');
      snackbar.addClass('show');
      setTimeout(() => {
        snackbar.removeClass('show');
      }, 3000);
    }
  });
</script>
