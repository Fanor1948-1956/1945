<section>
  <button
    id="addUserBtn"
    class="add-button"
    data-size="medium"
    {%
    if
    not
    isauthenticated
    %}
    style="display: none"
    {%endif%}
  >
    Agregar Usuario
  </button>

  <div id="userTableContainer"></div>

  <div
    id="snackbar"
    class="snackbar"
  ></div>

  <!-- Modal para agregar/editar usuarios -->
  <div
    class="modal"
    id="addUserModal"
    style="display: none"
  >
    <div class="modal-content">
      <span
        class="close-button"
        onclick="Modal.close('#addUserModal')"
        >×</span
      >
      <h2 class="modal-title"></h2>
      <form id="userForm">
        <label for="userName">Nombre:</label>
        <input
          type="text"
          id="userName"
          name="name"
          required=""
        />

        <label for="userSurnames">Apellidos:</label>
        <input
          type="text"
          id="userSurnames"
          name="surnames"
          required=""
        />

        <label for="userEmail">Correo:</label>
        <input
          type="email"
          id="userEmail"
          name="email"
          required=""
        />

        <label for="userPassword">Contraseña:</label>
        <input
          type="password"
          id="userPassword"
          name="password"
          required=""
        />

        <label for="userGender">Género:</label>
        <input
          type="text"
          id="userGender"
          name="gender"
          required=""
          readonly=""
        />
        <button
          type="button"
          id="selectGenderBtn"
        >
          Seleccionar Género
        </button>
        <br />
        <button
          type="button"
          id="selectRolesBtn"
        >
          Seleccionar Roles
        </button>
        <button
          type="button"
          id="saveItemBtn"
        >
          Guardar
        </button>
      </form>
    </div>
  </div>

  <!-- Modal para seleccionar género -->
  <div
    class="modal"
    id="selectGenderModal"
    style="display: none"
  >
    <div class="modal-content">
      <span
        class="close-button"
        onclick="closeModal('selectRolesModal')"
        >×</span
      >
      <h2 class="modal-title"></h2>
      <div id="genderContainer">
        <label>
          <input
            type="radio"
            name="gender"
            value="masculino"
          />
          Masculino
        </label>
        <label>
          <input
            type="radio"
            name="gender"
            value="femenino"
          />
          Femenino
        </label>
        <label>
          <input
            type="radio"
            name="gender"
            value="otro"
          />
          Otro
        </label>
      </div>
      <button
        type="button"
        id="saveGenderBtn"
      >
        Guardar Género
      </button>
    </div>
  </div>

  <!-- Modal para seleccionar roles -->
  <div
    class="modal"
    id="selectRolesModal"
    style="display: none"
  >
    <div class="modal-content">
      <span
        class="close-button"
        onclick="Modal.close('#selectRolesModal')"
        >×</span
      >
      <h2 class="modal-title"></h2>
      <div id="rolesContainer"></div>
      <button
        type="button"
        id="saveRolesBtn"
      >
        Guardar Roles
      </button>
    </div>
  </div>
</section>

<!-- Snackbar para mostrar mensajes -->
<div
  id="snackbar"
  class="snackbar"
></div>

{% include "components/custom/common/deleteItem.njk" %} {% include
"components/custom/customPopover.njk" %}
<div class="view-toggle-buttons">
  <button id="cardViewBtn">Vista Card</button>
  <button id="tableViewBtn">Vista Tabla</button>
</div>

<script type="module">
  import { renderTable } from '../js/components/common/table.js';
  import { renderCards } from '../js/components/common/card.js';
  import { renderPagination } from '../js/components/common/pagination.js';
  import { fetchServices } from '../js/services/index.js';
  import { getState } from '../js/reducers/state.js';
  import { setupEventListeners } from '../js/logic/users/index.js';
  import { onAction } from '../js/logic/users/actions.js';
  import { userEndpoints } from '../js/config/apiEndpoints.js';
  import { loadUsers } from '../js/reducers/userReducer.js';

  let currentPage = 1; // Página actual
  const usersPerPage = 10; // Número de usuarios por página
  const headers = ['Nombre Completo', 'Correo', 'Género', 'Roles']; // Encabezados de la tabla
  let filteredUsers = []; // Declarar filteredUsers en el ámbito superior
  let currentView = 'table'; // Valor inicial como "table" o "card"

  // Obtener usuarios cuando se carga la página
  const loadUsersList = async () => {
    console.log('Cargando lista de usuarios...');
    await fetchServices(userEndpoints, loadUsers);
    const { users } = getState();
    const roleAlias = '{{ roleAlias|lower }}'; // Obtén el rol desde la plantilla

    // Filtra los usuarios según el rol solo si roleAlias está definido
    if (roleAlias) {
      filteredUsers = users.filter((user) =>
        user.roles.some((roleObj) => roleObj.alias.toLowerCase() === roleAlias)
      );
    } else {
      filteredUsers = users; // Si no se especifica roleAlias, mostrar todos los usuarios
    }

    renderUsers();
  };

  // Función para renderizar usuarios según la vista seleccionada
  function renderUsers() {
    console.log(`Renderizando usuarios en vista ${currentView}...`);
    console.log('Usuarios filtrados:', filteredUsers); // Para depuración

    const data = filteredUsers.map((user) => ({
      _id: user._id,
      usuario: `${user.name} ${user.surnames}`,
      email: user.email,
      gender: user.gender,
      roles: user.roles.map((role) => role.name).join(', '),
      uploads: user.uploads,
    }));

    const container = document.getElementById('userTableContainer');
    container.innerHTML = ''; // Limpiar contenido previo

    if (currentView === 'table') {
      renderTable(headers, data, currentPage, usersPerPage, onAction);
    } else {
      renderCards(headers, data, currentPage, usersPerPage, onAction);
    }

    const paginationHtml = renderPagination(
      currentPage,
      filteredUsers.length,
      usersPerPage,
      handlePageChange
    );

    container.insertAdjacentHTML('beforeend', paginationHtml);

    // Inicializar listeners para botones de paginación
    initializePaginationButtons();
  }

  // Alternar entre vista de cards y tabla
  document.getElementById('cardViewBtn').addEventListener('click', () => {
    currentView = 'card';
    renderUsers();
  });

  document.getElementById('tableViewBtn').addEventListener('click', () => {
    currentView = 'table';
    renderUsers();
  });

  function handlePageChange(newPage) {
    currentPage = newPage;
    renderUsers();
  }

  // Función para inicializar los listeners de los botones de paginación
  function initializePaginationButtons() {
    const pageButtons = document.querySelectorAll('.page-button');
    pageButtons.forEach((button) => {
      button.removeEventListener('click', handlePageClick); // Limpiar cualquier listener previo
      button.addEventListener('click', handlePageClick);
    });
  }

  // Manejo del clic en los botones de paginación
  function handlePageClick(event) {
    const newPage = parseInt(event.currentTarget.getAttribute('data-page'));
    handlePageChange(newPage);
  }

  loadUsersList();
  setupEventListeners(loadUsersList);
  window.onAction = onAction;
</script>
